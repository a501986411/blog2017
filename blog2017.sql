/*
Navicat MySQL Data Transfer

Source Server         : 127.0.0.1
Source Server Version : 50617
Source Host           : 127.0.0.1:3306
Source Database       : blog2017

Target Server Type    : MYSQL
Target Server Version : 50617
File Encoding         : 65001

Date: 2017-12-12 16:42:11
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for blog_admin_user
-- ----------------------------
DROP TABLE IF EXISTS `blog_admin_user`;
CREATE TABLE `blog_admin_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id主键',
  `login_name` varchar(255) DEFAULT '' COMMENT '登录账号',
  `user_name` varchar(255) DEFAULT '' COMMENT '用户名',
  `password` varchar(255) NOT NULL DEFAULT '' COMMENT '密码加密字符串',
  `last_login_time` int(11) NOT NULL DEFAULT '0' COMMENT '最后一次登录时间',
  `ip` varchar(255) DEFAULT '' COMMENT '最后一次登录IP',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_admin_user
-- ----------------------------
INSERT INTO `blog_admin_user` VALUES ('1', 'admin', '黑牛儿', '14e1b600b1fd579f47433b88e8d85291', '1513062902', '127.0.0.1');

-- ----------------------------
-- Table structure for blog_article
-- ----------------------------
DROP TABLE IF EXISTS `blog_article`;
CREATE TABLE `blog_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` varchar(255) NOT NULL DEFAULT '' COMMENT '文章标题',
  `tag` text NOT NULL COMMENT '文章所属标签',
  `author` varchar(255) NOT NULL DEFAULT '' COMMENT '作者',
  `description` text NOT NULL COMMENT '文章描述信息',
  `content` text NOT NULL COMMENT '文章内容',
  `create_time` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(11) NOT NULL DEFAULT '0' COMMENT '修改时间',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态；1：正常，2：屏蔽',
  `visit_num` int(11) NOT NULL DEFAULT '0' COMMENT '阅读次数',
  `comment_num` int(11) NOT NULL DEFAULT '0' COMMENT '评论条数',
  `index_img` varchar(255) NOT NULL DEFAULT '' COMMENT '首图地址',
  `is_top` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否置顶；0：未置顶；1：已置顶',
  PRIMARY KEY (`id`),
  KEY `idx_visit` (`visit_num`) USING BTREE,
  KEY `idx_comment` (`comment_num`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8 COMMENT='文章列表';

-- ----------------------------
-- Records of blog_article
-- ----------------------------
INSERT INTO `blog_article` VALUES ('1', 'PHP程序设计', 'PHP|IOS|AI', '黑牛儿', '监考老师大姐夫\r\n水电费公司垃圾费\r\n是打发斯蒂芬\r\n十大f', '是的范德萨发\r\n## 十大范德萨发\r\n是的发生大法师的\r\n|  as |按时   |\r\n| ------------ | ------------ |\r\n|  asd | sa  |\r\n|  as | as  |\r\nsdfasfsdafsdf\r\n\r\n    <?php\r\n    /**\r\n     * Created by PhpStorm.\r\n     * User: chl\r\n     * Date: 2017/11/22\r\n     * Time: 13:40\r\n     */\r\n    namespace app\\admin\\controller;\r\n    \r\n    class ArticleManage {\r\n    \r\n        /**\r\n         * 显示文章列表\r\n         * @return \\think\\response\\View\r\n         */\r\n        public function index()\r\n        {\r\n            return view();\r\n        }\r\n    \r\n        public function save()\r\n        {\r\n            print_r(input());\r\n            return false;\r\n        }\r\n    }', '0', '1511495699', '1', '41', '321', '/static/tmpImg/201708252044567037.jpg', '1');
INSERT INTO `blog_article` VALUES ('2', '图片测试', 'IOS|AI|', '黑牛儿', '图片测试', '![](/uploads\\20171122\\c3ade49465f29d204e27fc9b0f5a9142.jpg)\r\nsdfsdfsdf\r\n`sdfsdfsdfsdfsdfsdfsdfsdfsd`\r\n[百度][1]\r\n[1]: http://www.baid.com \"百度\"', '0', '1511584928', '1', '13', '21', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('3', 'mysql 利用merge 引擎分表', 'Mysql|merge|分表|Mysqlfenbiao', '黑牛儿', 'Mysql利用merge 引擎实现分表', '# 序言\r\n		日常开发中我们经常会遇到大表的情况，所谓的大表是指存储了百万级乃至千万级条记录的表。这样的表过于庞大，导致数据库在查询和插入的时候耗时太长，性能低下，如果涉及联合查询的情况，性能会更加糟糕，可能就死在那了。分表的目的就是减少数据库的负担，提高数据库的效率，通常点来讲就是提高表的增删改查效率。这里主要讲使用MERGE存储引擎来实现分表。\r\n	\r\n# 正文\r\n个人是小白，所以在前人的经验上，把自己踩过的坑填上。在这里博主用的是MySQL5.5，有一张city表，举例把它分成两张表。 \r\n首先创建两张子表和city表具有同样的表结构\r\n    #查看表结构\r\n    mysql> desc city;\r\n    +-------------+----------+------+-----+---------+----------------+\r\n    | Field       | Type     | Null | Key | Default | Extra          |\r\n    +-------------+----------+------+-----+---------+----------------+\r\n    | ID          | int(11)  | NO   | PRI | NULL    | auto_increment |\r\n    | Name        | char(35) | NO   | MUL |         |                |\r\n    | CountryCode | char(3)  | NO   |     |         |                |\r\n    | District    | char(20) | NO   |     |         |                |\r\n    | Population  | int(11)  | NO   |     | 0       |                |\r\n    +-------------+----------+------+-----+---------+----------------+\r\n    5 rows in set (0.12 sec)\r\n    \r\n    #创建子表\r\n    mysql>CREATE TABLE IF NOT EXISTS `city1` (\r\n    ->  `ID` int(11) NOT NULL AUTO_INCREMENT,\r\n    ->  `Name` char(35) NOT NULL,\r\n    ->  `CountryCode` char(3) NOT NULL,\r\n    ->  `District` char(20) NOT NULL,\r\n    ->  `Population` int(11) NOT NULL,\r\n    ->  PRIMARY KEY (`ID`) ) \r\n    ->  ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;  \r\n    \r\n    mysql>CREATE TABLE IF NOT EXISTS `city2` (\r\n    ->  `ID` int(11) NOT NULL AUTO_INCREMENT,\r\n    ->  `Name` char(35) NOT NULL,\r\n    ->  `CountryCode` char(3) NOT NULL,\r\n    ->  `District` char(20) NOT NULL,\r\n    ->  `Population` int(11) NOT NULL,\r\n    ->  PRIMARY KEY (`ID`) ) \r\n    ->  ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ; \r\n	\r\n	现在来创建主表，主表类似于一个壳子，逻辑上封装了子表，实际上数据都是存储在子表中的。\r\n	    #创建主表\r\n    mysql>CREATE TABLE IF NOT EXISTS `allcity` (\r\n    ->  `ID` int(11) NOT NULL AUTO_INCREMENT,\r\n    ->  `Name` char(35) NOT NULL,\r\n    ->  `CountryCode` char(3) NOT NULL,\r\n    ->  `District` char(20) NOT NULL,\r\n    ->  `Population` int(11) NOT NULL,\r\n    ->  PRIMARY KEY (`ID`) ) \r\n    ->  ENGINE=MERGE UNION=(city1,city2) INSERT_METHOD=LAST CHARSET=utf8 AUTO_INCREMENT=1 ;\r\n	\r\n	创建主表的时候有个INSERT_METHOD，指明插入方式，取值可以是：0 不允许插入；FIRST 插入到UNION中的第一个表； LAST 插入到UNION中的最后一个表。现在我需要把现有的city表分为分拆到city1和city2表中。\r\n	\r\n    #把2000条数据插入city1表\r\n    mysql>INSERT INTO city1(city1.ID,city1.Name,city1.CountryCode,city1.District,city1.Population) SELECT city.ID,city.Name,city.CountryCode,city.District,city.Population FROM city where city.ID <= 2000;   \r\n    #把剩下的数据插入city2表\r\n    mysql>INSERT INTO city2(city2.ID,city2.Name,city2.CountryCode,city2.District,city2.Population) SELECT city.ID,city.Name,city.CountryCode,city.District,city.Population FROM city where city.ID >= 2000;  \r\n\r\n这样我就成功的将一张city表，分成了二个表，这个时候有一个问题，代码中的sql语句怎么办，以前是一张表，现在变成二张表了，代码改动很大，这样带来了很大的工作量，有没有好的办法解决这一点呢？办法是把以前的city表备份一下，然后删除掉，上面的操作中我建立了一个allcity表，只把这个allcity表的表名改成city就行了。', '1511490430', '1511495682', '1', '129', '1', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('4', 'git创建ssh key', 'GIT|SSH|ssh key 创建', '黑牛儿', 'Git是分布式的代码管理工具，远程的代码管理是基于SSH的，\r\n所以要使用远程的Git则需要SSH的配置。', '	Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。\r\n	github的SSH配置如下：\r\n	一 、设置Git的user name和email：\r\n	$ git config --global user.name \"aa\"\r\n	$ git config --global user.email \"aaa@gmail.com\"\r\n	二、生产SSH key密钥\r\n	1.查看是否已经有了ssh密钥：cd ~/.ssh\r\n	如果没有密钥则不会有此文件夹，有则备份删除\r\n	2.生存密钥：\r\n	$ ssh-keygen -t rsa -C “aaa@gmail.com”\r\n	按3个回车，密码为空。\r\n	（email@email.com是github的账号，即上面的email）\r\n\r\n	Your identification has been saved in /home/tekkub/.ssh/id_rsa.\r\n	Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.\r\n	The key fingerprint is:\r\n\r\n	最后得到了两个文件：id_rsa和id_rsa.pub\r\n	3.添加id_rsa密钥到ssh，命令为：ssh-add 文件名\r\n	 如果出现error：Could not open a connection to your authentication agent.\r\n	   则先执行：$ssh-agent bash\r\n	   然后再执行：$ssh-add id_rsa \r\n出现一下结果：\r\n![](/uploads/20171125\\4719476df7e9a31db58c29c408b02589.png)\r\n\r\n	4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。\r\n	打开https://github.com/ ，登陆，复制id_rsa.pub里面的内容添加ssh。\r\n	如果直接从Linux上复制id_rsa.pub的内容，可能会复制里面的换行符，而key是没有换行符的，直接复制可能会出现下面的错误提示：\r\n	Key is invalid\r\n	Fingerprint has already been taken\r\n	Fingerprint cannot be generated\r\n\r\n	解决方案：\r\n		   $cat id_rsa.pub\r\n然后复制里面的内容，就OK了！', '1511585690', '1511585690', '1', '0', '0', '/uploads/20171125\\4719476df7e9a31db58c29c408b02589.png', '0');
INSERT INTO `blog_article` VALUES ('5', '金额转大写', 'JS|Javascript|金额转大写', '黑牛儿', '利用js实现金额大写转换\r\n', '\r\n###需提前引入jquery \r\n```\r\n(function ($) {\r\n        $.numToRmb = function (n) {\r\n            var fraction = [\'角\', \'分\'];\r\n            var digit = [\r\n                \'零\', \'壹\', \'贰\', \'叁\', \'肆\',\r\n                \'伍\', \'陆\', \'柒\', \'捌\', \'玖\'\r\n            ];\r\n            var unit = [\r\n                [\'元\', \'万\', \'亿\'],\r\n                [\'\', \'拾\', \'佰\', \'仟\']\r\n            ];\r\n            var head = n < 0 ? \'负数\' : \'\';\r\n            n = Math.abs(n);\r\n            var s = \'\';\r\n            for (var i = 0; i < fraction.length; i++) {\r\n                s += (digit[Math.floor(n * (10 * Math.pow(10, i))) % 10] + fraction[i]).replace(/零./, \'\');\r\n            }\r\n            s = s || \'整\';\r\n            n = Math.floor(n);\r\n            for (var i = 0; i < unit[0].length && n > 0; i++) {\r\n                var p = \'\';\r\n                for (var j = 0; j < unit[1].length && n > 0; j++) {\r\n                    p = digit[n % 10] + unit[1][j] + p;\r\n                    n = Math.floor(n / 10);\r\n                }\r\n                s = p.replace(/(零.)*零$/, \'\').replace(/^$/, \'零\') + unit[0][i] + s;\r\n            }\r\n            return head + s.replace(/(零.)*零元/, \'元\')\r\n                            .replace(/(零.)+/g, \'零\')\r\n                            .replace(/^整$/, \'零元整\');\r\n        }\r\n    })(jQuery)\r\n\r\n```\r\n - 调用方法:`$.numToRmb(125.24)`', '1511585979', '1511585979', '1', '0', '0', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('6', 'mysql主从数据库实现数据同步', 'Mysql|数据同步|主从数据库', '黑牛儿', 'mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。\r\n趁着这段时间相对空闲，也就自己实现一遍。\r\n尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。', '	  mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。趁着这段时间相对空闲，也就自己实现一遍。尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。\r\n	环境:\r\n	主服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.107\r\n	从服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.109\r\n	主服务器test数据库\r\n\r\n	CREATE TABLE `menber` (\r\n	`name` varchar(255) DEFAULT NULL default \'\',\r\n	`id` int(11) NOT NULL AUTO_INCREMENT,\r\n	PRIMARY KEY (`id`)\r\n	) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\r\n	insert into `menber` (`name`, `id`) values(\'zhangsan\',\'1\');\r\n	insert into `menber` (`name`, `id`) values(\'lisi\',\'2\');\r\n	insert into `menber` (`name`, `id`) values(\'王五\',\'3\');\r\n\r\n	mysql默认配置文件，如不特殊指定默认为/etc/my.cnf\r\n	mysql配置文件查找顺序：/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\r\n	配置：\r\n	一、主服务器\r\n	1.1、创建一个复制用户，具有replication slave 权限。\r\n	mysql>grant replication slave on *.* to \'repl\'@\'192.168.0.109\' identified by \'repl\';\r\n	mysql>flush privileges;\r\n	1.2、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	  server-id=107\r\n	并开启log-bin二进制日志文件（Mysql需要有/var/lib/mysql/目录的读写权限【可通过chown -R mysql:mysql /var/lib/mysql命令进行更改】）\r\n	  log-bin=/var/lib/mysql/mysql-bin\r\n	#指定绝对路径，否者会出现mysql运行show master status;时无法查看日志情况\r\n	mysql> show master status;\r\n	Empty set (0.00 sec)\r\n	mysql> show binary logs;\r\n	ERROR 1381 (HY000): You are not using binary logging\r\n	其他扩展配置项：　\r\n	binlog-do-db=mysql1 #需要备份的数据库名，如果备份多个数据库，重复设置这个选项 即可\r\n	binlog-ignore-db=mysql2 #不需要备份的数据库名，如果备份多个数据库，重复设置这 个选项即可\r\n	log-slave-updates=1 #这个参数一定要加上，否则不会给更新的记录些到二进制文件 里\r\n	slave-skip-errors=1 #是跳过错误，继续执行复制操作(可选)\r\n	1.3、重启mysql数据库\r\n	service mysqld restart\r\n	1.4、设置读锁\r\n	mysql>flush tables with read lock;\r\n	1.5、得到binlog日志文件名和偏移量（此处记住File名称和Position值，后面slave服务器配置时需要用到）\r\n\r\n	mysql> show master status;\r\n	+------------------+----------+--------------+------------------+\r\n	| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n	+------------------+----------+--------------+------------------+\r\n	| mysql-bin.000001 |      713 |              |                  |\r\n	+------------------+----------+--------------+------------------+\r\n	1 row in set (0.00 sec)\r\n\r\n\r\n	1.6、备份要同步的数据库\r\n	mysqldump test > test.sql\r\n	1.7、解锁\r\n	mysql>unlock tables;\r\n\r\n	二、从服务器（192.168.0.109）\r\n	将master（192.168.0.107）备份的数据库数据恢复到slave从服务器（192.168.0.109）\r\n	2.1、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	server-id=109\r\n	2.2、重启从数据库\r\n	service mysqld restart\r\n	2.3、对从数据库进行相应设置\r\n	  此处要注意logfile的名称和position的值，其余host、user和password为主数据库设置的账号和密码\r\n\r\n	mysql> stop slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> change master to \r\n	   -> master_host=\'192.168.0.107\',\r\n	   -> master_user=\'repl\',\r\n	   -> master_password=\'repl\',\r\n	   -> master_log_file=\'mysql-bin.000001\',\r\n	   -> master_log_pos=713;\r\n	mysql> start slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> show slave status\\G;\r\n	*************************** 1. row ***************************\r\n	Slave_IO_State: Waiting for master to send event\r\n	Master_Host: 192.168.0.107\r\n	Master_User: repl\r\n	Master_Port: 3306\r\n	Connect_Retry: 60\r\n	Master_Log_File: mysql-bin.000001\r\n	Read_Master_Log_Pos: 1079\r\n	Relay_Log_File: mysqld-relay-bin.000004\r\n	Relay_Log_Pos: 251\r\n	Relay_Master_Log_File: mysql-bin.000001\r\n	Slave_IO_Running: Yes\r\n	Slave_SQL_Running: Yes\r\n	Replicate_Do_DB: \r\n	Replicate_Ignore_DB: \r\n	Replicate_Do_Table: \r\n	Replicate_Ignore_Table: \r\n	Replicate_Wild_Do_Table: \r\n	Replicate_Wild_Ignore_Table: \r\n	Last_Errno: 0\r\n	Last_Error: \r\n	Skip_Counter: 0\r\n	Exec_Master_Log_Pos: 1079\r\n	Relay_Log_Space: 407\r\n	Until_Condition: None\r\n	Until_Log_File: \r\n	Until_Log_Pos: 0\r\n	Master_SSL_Allowed: No\r\n	Master_SSL_CA_File: \r\n	Master_SSL_CA_Path: \r\n	Master_SSL_Cert: \r\n	Master_SSL_Cipher: \r\n	Master_SSL_Key: \r\n	Seconds_Behind_Master: 0\r\n	Master_SSL_Verify_Server_Cert: No\r\n	Last_IO_Errno: 0\r\n	Last_IO_Error: \r\n	Last_SQL_Errno: 0\r\n	Last_SQL_Error: \r\n	1 row in set (0.00 sec)\r\n	ERROR: \r\n	No query specified\r\n\r\n	在这里主要是看:\r\n	  Slave_IO_Running=Yes\r\n	  Slave_SQL_Running=Yes\r\n	如果出现Slave_IO_Running: No或Slave_SQL_Running: NO；需要检查主服务器防火墙，可关闭防火墙或者开发数据库连接端口，或者重做2.3、对从数据库进行相应设置\r\n	三、测试：\r\n	  上述项配置完以后可查看master和slave上线程的状态。在master上，你可以看到slave的I/O线程创建的连接：在master上输入show processlist\\G;\r\n\r\n	mysql> show processlist\\G;\r\n	*************************** 1. row ***************************\r\n		 Id: 4\r\n	   User: root\r\n	   Host: localhost\r\n		 db: NULL\r\n	Command: Query\r\n	   Time: 0\r\n	  State: NULL\r\n	   Info: show processlist\r\n	*************************** 2. row ***************************\r\n		 Id: 19\r\n	   User: repl\r\n	   Host: 192.168.0.109:42337\r\n		 db: NULL\r\n	Command: Binlog Dump\r\n	   Time: 183\r\n	  State: Has sent all binlog to slave; waiting for binlog to be updated\r\n	   Info: NULL\r\n	2 rows in set (0.00 sec)\r\n\r\n	ERROR: \r\n	No query specified\r\n\r\n	  3.1、在主数据库：192.168.0.107上添加新数据\r\n	insert into `menber` (`name`) values(\'李八\');insert into `menber` (`name`) values(\'苍井空\');\r\n	3.2从数据库：192.168.0.109上查看数据库\r\n\r\n	mysql> select * from menber;\r\n	+-----------+----+\r\n	| name      | id |\r\n	+-----------+----+\r\n	| zhangsan  |  1 |\r\n	| lisi      |  2 |\r\n	| 王五    |  3 |\r\n	| 李八    |  4 |\r\n	| 苍井空 |  5 |\r\n	+-----------+----+\r\n	5 rows in set (0.02 sec)', '1511586586', '1511609054', '1', '6', '0', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('7', 'mysql主从数据库实现数据同步', 'Mysql|数据同步|主从数据库', '黑牛儿', 'mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。\r\n趁着这段时间相对空闲，也就自己实现一遍。\r\n尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。', '	  mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。趁着这段时间相对空闲，也就自己实现一遍。尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。\r\n	环境:\r\n	主服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.107\r\n	从服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.109\r\n	主服务器test数据库\r\n\r\n	CREATE TABLE `menber` (\r\n	`name` varchar(255) DEFAULT NULL default \'\',\r\n	`id` int(11) NOT NULL AUTO_INCREMENT,\r\n	PRIMARY KEY (`id`)\r\n	) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\r\n	insert into `menber` (`name`, `id`) values(\'zhangsan\',\'1\');\r\n	insert into `menber` (`name`, `id`) values(\'lisi\',\'2\');\r\n	insert into `menber` (`name`, `id`) values(\'王五\',\'3\');\r\n\r\n	mysql默认配置文件，如不特殊指定默认为/etc/my.cnf\r\n	mysql配置文件查找顺序：/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\r\n	配置：\r\n	一、主服务器\r\n	1.1、创建一个复制用户，具有replication slave 权限。\r\n	mysql>grant replication slave on *.* to \'repl\'@\'192.168.0.109\' identified by \'repl\';\r\n	mysql>flush privileges;\r\n	1.2、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	  server-id=107\r\n	并开启log-bin二进制日志文件（Mysql需要有/var/lib/mysql/目录的读写权限【可通过chown -R mysql:mysql /var/lib/mysql命令进行更改】）\r\n	  log-bin=/var/lib/mysql/mysql-bin\r\n	#指定绝对路径，否者会出现mysql运行show master status;时无法查看日志情况\r\n	mysql> show master status;\r\n	Empty set (0.00 sec)\r\n	mysql> show binary logs;\r\n	ERROR 1381 (HY000): You are not using binary logging\r\n	其他扩展配置项：　\r\n	binlog-do-db=mysql1 #需要备份的数据库名，如果备份多个数据库，重复设置这个选项 即可\r\n	binlog-ignore-db=mysql2 #不需要备份的数据库名，如果备份多个数据库，重复设置这 个选项即可\r\n	log-slave-updates=1 #这个参数一定要加上，否则不会给更新的记录些到二进制文件 里\r\n	slave-skip-errors=1 #是跳过错误，继续执行复制操作(可选)\r\n	1.3、重启mysql数据库\r\n	service mysqld restart\r\n	1.4、设置读锁\r\n	mysql>flush tables with read lock;\r\n	1.5、得到binlog日志文件名和偏移量（此处记住File名称和Position值，后面slave服务器配置时需要用到）\r\n\r\n	mysql> show master status;\r\n	+------------------+----------+--------------+------------------+\r\n	| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n	+------------------+----------+--------------+------------------+\r\n	| mysql-bin.000001 |      713 |              |                  |\r\n	+------------------+----------+--------------+------------------+\r\n	1 row in set (0.00 sec)\r\n\r\n\r\n	1.6、备份要同步的数据库\r\n	mysqldump test > test.sql\r\n	1.7、解锁\r\n	mysql>unlock tables;\r\n\r\n	二、从服务器（192.168.0.109）\r\n	将master（192.168.0.107）备份的数据库数据恢复到slave从服务器（192.168.0.109）\r\n	2.1、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	server-id=109\r\n	2.2、重启从数据库\r\n	service mysqld restart\r\n	2.3、对从数据库进行相应设置\r\n	  此处要注意logfile的名称和position的值，其余host、user和password为主数据库设置的账号和密码\r\n\r\n	mysql> stop slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> change master to \r\n	   -> master_host=\'192.168.0.107\',\r\n	   -> master_user=\'repl\',\r\n	   -> master_password=\'repl\',\r\n	   -> master_log_file=\'mysql-bin.000001\',\r\n	   -> master_log_pos=713;\r\n	mysql> start slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> show slave status\\G;\r\n	*************************** 1. row ***************************\r\n	Slave_IO_State: Waiting for master to send event\r\n	Master_Host: 192.168.0.107\r\n	Master_User: repl\r\n	Master_Port: 3306\r\n	Connect_Retry: 60\r\n	Master_Log_File: mysql-bin.000001\r\n	Read_Master_Log_Pos: 1079\r\n	Relay_Log_File: mysqld-relay-bin.000004\r\n	Relay_Log_Pos: 251\r\n	Relay_Master_Log_File: mysql-bin.000001\r\n	Slave_IO_Running: Yes\r\n	Slave_SQL_Running: Yes\r\n	Replicate_Do_DB: \r\n	Replicate_Ignore_DB: \r\n	Replicate_Do_Table: \r\n	Replicate_Ignore_Table: \r\n	Replicate_Wild_Do_Table: \r\n	Replicate_Wild_Ignore_Table: \r\n	Last_Errno: 0\r\n	Last_Error: \r\n	Skip_Counter: 0\r\n	Exec_Master_Log_Pos: 1079\r\n	Relay_Log_Space: 407\r\n	Until_Condition: None\r\n	Until_Log_File: \r\n	Until_Log_Pos: 0\r\n	Master_SSL_Allowed: No\r\n	Master_SSL_CA_File: \r\n	Master_SSL_CA_Path: \r\n	Master_SSL_Cert: \r\n	Master_SSL_Cipher: \r\n	Master_SSL_Key: \r\n	Seconds_Behind_Master: 0\r\n	Master_SSL_Verify_Server_Cert: No\r\n	Last_IO_Errno: 0\r\n	Last_IO_Error: \r\n	Last_SQL_Errno: 0\r\n	Last_SQL_Error: \r\n	1 row in set (0.00 sec)\r\n	ERROR: \r\n	No query specified\r\n\r\n	在这里主要是看:\r\n	  Slave_IO_Running=Yes\r\n	  Slave_SQL_Running=Yes\r\n	如果出现Slave_IO_Running: No或Slave_SQL_Running: NO；需要检查主服务器防火墙，可关闭防火墙或者开发数据库连接端口，或者重做2.3、对从数据库进行相应设置\r\n	三、测试：\r\n	  上述项配置完以后可查看master和slave上线程的状态。在master上，你可以看到slave的I/O线程创建的连接：在master上输入show processlist\\G;\r\n\r\n	mysql> show processlist\\G;\r\n	*************************** 1. row ***************************\r\n		 Id: 4\r\n	   User: root\r\n	   Host: localhost\r\n		 db: NULL\r\n	Command: Query\r\n	   Time: 0\r\n	  State: NULL\r\n	   Info: show processlist\r\n	*************************** 2. row ***************************\r\n		 Id: 19\r\n	   User: repl\r\n	   Host: 192.168.0.109:42337\r\n		 db: NULL\r\n	Command: Binlog Dump\r\n	   Time: 183\r\n	  State: Has sent all binlog to slave; waiting for binlog to be updated\r\n	   Info: NULL\r\n	2 rows in set (0.00 sec)\r\n\r\n	ERROR: \r\n	No query specified\r\n\r\n	  3.1、在主数据库：192.168.0.107上添加新数据\r\n	insert into `menber` (`name`) values(\'李八\');insert into `menber` (`name`) values(\'苍井空\');\r\n	3.2从数据库：192.168.0.109上查看数据库\r\n\r\n	mysql> select * from menber;\r\n	+-----------+----+\r\n	| name      | id |\r\n	+-----------+----+\r\n	| zhangsan  |  1 |\r\n	| lisi      |  2 |\r\n	| 王五    |  3 |\r\n	| 李八    |  4 |\r\n	| 苍井空 |  5 |\r\n	+-----------+----+\r\n	5 rows in set (0.02 sec)', '1511586586', '1511609055', '1', '1', '0', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('8', 'mysql主从数据库实现数据同步', 'Mysql|数据同步|主从数据库', '黑牛儿', 'mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。\r\n趁着这段时间相对空闲，也就自己实现一遍。\r\n尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。', '	  mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。趁着这段时间相对空闲，也就自己实现一遍。尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。\r\n	环境:\r\n	主服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.107\r\n	从服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.109\r\n	主服务器test数据库\r\n\r\n	CREATE TABLE `menber` (\r\n	`name` varchar(255) DEFAULT NULL default \'\',\r\n	`id` int(11) NOT NULL AUTO_INCREMENT,\r\n	PRIMARY KEY (`id`)\r\n	) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\r\n	insert into `menber` (`name`, `id`) values(\'zhangsan\',\'1\');\r\n	insert into `menber` (`name`, `id`) values(\'lisi\',\'2\');\r\n	insert into `menber` (`name`, `id`) values(\'王五\',\'3\');\r\n\r\n	mysql默认配置文件，如不特殊指定默认为/etc/my.cnf\r\n	mysql配置文件查找顺序：/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\r\n	配置：\r\n	一、主服务器\r\n	1.1、创建一个复制用户，具有replication slave 权限。\r\n	mysql>grant replication slave on *.* to \'repl\'@\'192.168.0.109\' identified by \'repl\';\r\n	mysql>flush privileges;\r\n	1.2、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	  server-id=107\r\n	并开启log-bin二进制日志文件（Mysql需要有/var/lib/mysql/目录的读写权限【可通过chown -R mysql:mysql /var/lib/mysql命令进行更改】）\r\n	  log-bin=/var/lib/mysql/mysql-bin\r\n	#指定绝对路径，否者会出现mysql运行show master status;时无法查看日志情况\r\n	mysql> show master status;\r\n	Empty set (0.00 sec)\r\n	mysql> show binary logs;\r\n	ERROR 1381 (HY000): You are not using binary logging\r\n	其他扩展配置项：　\r\n	binlog-do-db=mysql1 #需要备份的数据库名，如果备份多个数据库，重复设置这个选项 即可\r\n	binlog-ignore-db=mysql2 #不需要备份的数据库名，如果备份多个数据库，重复设置这 个选项即可\r\n	log-slave-updates=1 #这个参数一定要加上，否则不会给更新的记录些到二进制文件 里\r\n	slave-skip-errors=1 #是跳过错误，继续执行复制操作(可选)\r\n	1.3、重启mysql数据库\r\n	service mysqld restart\r\n	1.4、设置读锁\r\n	mysql>flush tables with read lock;\r\n	1.5、得到binlog日志文件名和偏移量（此处记住File名称和Position值，后面slave服务器配置时需要用到）\r\n\r\n	mysql> show master status;\r\n	+------------------+----------+--------------+------------------+\r\n	| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n	+------------------+----------+--------------+------------------+\r\n	| mysql-bin.000001 |      713 |              |                  |\r\n	+------------------+----------+--------------+------------------+\r\n	1 row in set (0.00 sec)\r\n\r\n\r\n	1.6、备份要同步的数据库\r\n	mysqldump test > test.sql\r\n	1.7、解锁\r\n	mysql>unlock tables;\r\n\r\n	二、从服务器（192.168.0.109）\r\n	将master（192.168.0.107）备份的数据库数据恢复到slave从服务器（192.168.0.109）\r\n	2.1、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	server-id=109\r\n	2.2、重启从数据库\r\n	service mysqld restart\r\n	2.3、对从数据库进行相应设置\r\n	  此处要注意logfile的名称和position的值，其余host、user和password为主数据库设置的账号和密码\r\n\r\n	mysql> stop slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> change master to \r\n	   -> master_host=\'192.168.0.107\',\r\n	   -> master_user=\'repl\',\r\n	   -> master_password=\'repl\',\r\n	   -> master_log_file=\'mysql-bin.000001\',\r\n	   -> master_log_pos=713;\r\n	mysql> start slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> show slave status\\G;\r\n	*************************** 1. row ***************************\r\n	Slave_IO_State: Waiting for master to send event\r\n	Master_Host: 192.168.0.107\r\n	Master_User: repl\r\n	Master_Port: 3306\r\n	Connect_Retry: 60\r\n	Master_Log_File: mysql-bin.000001\r\n	Read_Master_Log_Pos: 1079\r\n	Relay_Log_File: mysqld-relay-bin.000004\r\n	Relay_Log_Pos: 251\r\n	Relay_Master_Log_File: mysql-bin.000001\r\n	Slave_IO_Running: Yes\r\n	Slave_SQL_Running: Yes\r\n	Replicate_Do_DB: \r\n	Replicate_Ignore_DB: \r\n	Replicate_Do_Table: \r\n	Replicate_Ignore_Table: \r\n	Replicate_Wild_Do_Table: \r\n	Replicate_Wild_Ignore_Table: \r\n	Last_Errno: 0\r\n	Last_Error: \r\n	Skip_Counter: 0\r\n	Exec_Master_Log_Pos: 1079\r\n	Relay_Log_Space: 407\r\n	Until_Condition: None\r\n	Until_Log_File: \r\n	Until_Log_Pos: 0\r\n	Master_SSL_Allowed: No\r\n	Master_SSL_CA_File: \r\n	Master_SSL_CA_Path: \r\n	Master_SSL_Cert: \r\n	Master_SSL_Cipher: \r\n	Master_SSL_Key: \r\n	Seconds_Behind_Master: 0\r\n	Master_SSL_Verify_Server_Cert: No\r\n	Last_IO_Errno: 0\r\n	Last_IO_Error: \r\n	Last_SQL_Errno: 0\r\n	Last_SQL_Error: \r\n	1 row in set (0.00 sec)\r\n	ERROR: \r\n	No query specified\r\n\r\n	在这里主要是看:\r\n	  Slave_IO_Running=Yes\r\n	  Slave_SQL_Running=Yes\r\n	如果出现Slave_IO_Running: No或Slave_SQL_Running: NO；需要检查主服务器防火墙，可关闭防火墙或者开发数据库连接端口，或者重做2.3、对从数据库进行相应设置\r\n	三、测试：\r\n	  上述项配置完以后可查看master和slave上线程的状态。在master上，你可以看到slave的I/O线程创建的连接：在master上输入show processlist\\G;\r\n\r\n	mysql> show processlist\\G;\r\n	*************************** 1. row ***************************\r\n		 Id: 4\r\n	   User: root\r\n	   Host: localhost\r\n		 db: NULL\r\n	Command: Query\r\n	   Time: 0\r\n	  State: NULL\r\n	   Info: show processlist\r\n	*************************** 2. row ***************************\r\n		 Id: 19\r\n	   User: repl\r\n	   Host: 192.168.0.109:42337\r\n		 db: NULL\r\n	Command: Binlog Dump\r\n	   Time: 183\r\n	  State: Has sent all binlog to slave; waiting for binlog to be updated\r\n	   Info: NULL\r\n	2 rows in set (0.00 sec)\r\n\r\n	ERROR: \r\n	No query specified\r\n\r\n	  3.1、在主数据库：192.168.0.107上添加新数据\r\n	insert into `menber` (`name`) values(\'李八\');insert into `menber` (`name`) values(\'苍井空\');\r\n	3.2从数据库：192.168.0.109上查看数据库\r\n\r\n	mysql> select * from menber;\r\n	+-----------+----+\r\n	| name      | id |\r\n	+-----------+----+\r\n	| zhangsan  |  1 |\r\n	| lisi      |  2 |\r\n	| 王五    |  3 |\r\n	| 李八    |  4 |\r\n	| 苍井空 |  5 |\r\n	+-----------+----+\r\n	5 rows in set (0.02 sec)', '1511586586', '1511609056', '1', '0', '0', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('9', 'mysql主从数据库实现数据同步', 'Mysql|数据同步|主从数据库', '黑牛儿', 'mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。\r\n趁着这段时间相对空闲，也就自己实现一遍。\r\n尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。', '	  mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。趁着这段时间相对空闲，也就自己实现一遍。尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。\r\n	环境:\r\n	主服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.107\r\n	从服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.109\r\n	主服务器test数据库\r\n\r\n	CREATE TABLE `menber` (\r\n	`name` varchar(255) DEFAULT NULL default \'\',\r\n	`id` int(11) NOT NULL AUTO_INCREMENT,\r\n	PRIMARY KEY (`id`)\r\n	) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\r\n	insert into `menber` (`name`, `id`) values(\'zhangsan\',\'1\');\r\n	insert into `menber` (`name`, `id`) values(\'lisi\',\'2\');\r\n	insert into `menber` (`name`, `id`) values(\'王五\',\'3\');\r\n\r\n	mysql默认配置文件，如不特殊指定默认为/etc/my.cnf\r\n	mysql配置文件查找顺序：/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\r\n	配置：\r\n	一、主服务器\r\n	1.1、创建一个复制用户，具有replication slave 权限。\r\n	mysql>grant replication slave on *.* to \'repl\'@\'192.168.0.109\' identified by \'repl\';\r\n	mysql>flush privileges;\r\n	1.2、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	  server-id=107\r\n	并开启log-bin二进制日志文件（Mysql需要有/var/lib/mysql/目录的读写权限【可通过chown -R mysql:mysql /var/lib/mysql命令进行更改】）\r\n	  log-bin=/var/lib/mysql/mysql-bin\r\n	#指定绝对路径，否者会出现mysql运行show master status;时无法查看日志情况\r\n	mysql> show master status;\r\n	Empty set (0.00 sec)\r\n	mysql> show binary logs;\r\n	ERROR 1381 (HY000): You are not using binary logging\r\n	其他扩展配置项：　\r\n	binlog-do-db=mysql1 #需要备份的数据库名，如果备份多个数据库，重复设置这个选项 即可\r\n	binlog-ignore-db=mysql2 #不需要备份的数据库名，如果备份多个数据库，重复设置这 个选项即可\r\n	log-slave-updates=1 #这个参数一定要加上，否则不会给更新的记录些到二进制文件 里\r\n	slave-skip-errors=1 #是跳过错误，继续执行复制操作(可选)\r\n	1.3、重启mysql数据库\r\n	service mysqld restart\r\n	1.4、设置读锁\r\n	mysql>flush tables with read lock;\r\n	1.5、得到binlog日志文件名和偏移量（此处记住File名称和Position值，后面slave服务器配置时需要用到）\r\n\r\n	mysql> show master status;\r\n	+------------------+----------+--------------+------------------+\r\n	| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n	+------------------+----------+--------------+------------------+\r\n	| mysql-bin.000001 |      713 |              |                  |\r\n	+------------------+----------+--------------+------------------+\r\n	1 row in set (0.00 sec)\r\n\r\n\r\n	1.6、备份要同步的数据库\r\n	mysqldump test > test.sql\r\n	1.7、解锁\r\n	mysql>unlock tables;\r\n\r\n	二、从服务器（192.168.0.109）\r\n	将master（192.168.0.107）备份的数据库数据恢复到slave从服务器（192.168.0.109）\r\n	2.1、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	server-id=109\r\n	2.2、重启从数据库\r\n	service mysqld restart\r\n	2.3、对从数据库进行相应设置\r\n	  此处要注意logfile的名称和position的值，其余host、user和password为主数据库设置的账号和密码\r\n\r\n	mysql> stop slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> change master to \r\n	   -> master_host=\'192.168.0.107\',\r\n	   -> master_user=\'repl\',\r\n	   -> master_password=\'repl\',\r\n	   -> master_log_file=\'mysql-bin.000001\',\r\n	   -> master_log_pos=713;\r\n	mysql> start slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> show slave status\\G;\r\n	*************************** 1. row ***************************\r\n	Slave_IO_State: Waiting for master to send event\r\n	Master_Host: 192.168.0.107\r\n	Master_User: repl\r\n	Master_Port: 3306\r\n	Connect_Retry: 60\r\n	Master_Log_File: mysql-bin.000001\r\n	Read_Master_Log_Pos: 1079\r\n	Relay_Log_File: mysqld-relay-bin.000004\r\n	Relay_Log_Pos: 251\r\n	Relay_Master_Log_File: mysql-bin.000001\r\n	Slave_IO_Running: Yes\r\n	Slave_SQL_Running: Yes\r\n	Replicate_Do_DB: \r\n	Replicate_Ignore_DB: \r\n	Replicate_Do_Table: \r\n	Replicate_Ignore_Table: \r\n	Replicate_Wild_Do_Table: \r\n	Replicate_Wild_Ignore_Table: \r\n	Last_Errno: 0\r\n	Last_Error: \r\n	Skip_Counter: 0\r\n	Exec_Master_Log_Pos: 1079\r\n	Relay_Log_Space: 407\r\n	Until_Condition: None\r\n	Until_Log_File: \r\n	Until_Log_Pos: 0\r\n	Master_SSL_Allowed: No\r\n	Master_SSL_CA_File: \r\n	Master_SSL_CA_Path: \r\n	Master_SSL_Cert: \r\n	Master_SSL_Cipher: \r\n	Master_SSL_Key: \r\n	Seconds_Behind_Master: 0\r\n	Master_SSL_Verify_Server_Cert: No\r\n	Last_IO_Errno: 0\r\n	Last_IO_Error: \r\n	Last_SQL_Errno: 0\r\n	Last_SQL_Error: \r\n	1 row in set (0.00 sec)\r\n	ERROR: \r\n	No query specified\r\n\r\n	在这里主要是看:\r\n	  Slave_IO_Running=Yes\r\n	  Slave_SQL_Running=Yes\r\n	如果出现Slave_IO_Running: No或Slave_SQL_Running: NO；需要检查主服务器防火墙，可关闭防火墙或者开发数据库连接端口，或者重做2.3、对从数据库进行相应设置\r\n	三、测试：\r\n	  上述项配置完以后可查看master和slave上线程的状态。在master上，你可以看到slave的I/O线程创建的连接：在master上输入show processlist\\G;\r\n\r\n	mysql> show processlist\\G;\r\n	*************************** 1. row ***************************\r\n		 Id: 4\r\n	   User: root\r\n	   Host: localhost\r\n		 db: NULL\r\n	Command: Query\r\n	   Time: 0\r\n	  State: NULL\r\n	   Info: show processlist\r\n	*************************** 2. row ***************************\r\n		 Id: 19\r\n	   User: repl\r\n	   Host: 192.168.0.109:42337\r\n		 db: NULL\r\n	Command: Binlog Dump\r\n	   Time: 183\r\n	  State: Has sent all binlog to slave; waiting for binlog to be updated\r\n	   Info: NULL\r\n	2 rows in set (0.00 sec)\r\n\r\n	ERROR: \r\n	No query specified\r\n\r\n	  3.1、在主数据库：192.168.0.107上添加新数据\r\n	insert into `menber` (`name`) values(\'李八\');insert into `menber` (`name`) values(\'苍井空\');\r\n	3.2从数据库：192.168.0.109上查看数据库\r\n\r\n	mysql> select * from menber;\r\n	+-----------+----+\r\n	| name      | id |\r\n	+-----------+----+\r\n	| zhangsan  |  1 |\r\n	| lisi      |  2 |\r\n	| 王五    |  3 |\r\n	| 李八    |  4 |\r\n	| 苍井空 |  5 |\r\n	+-----------+----+\r\n	5 rows in set (0.02 sec)', '1511586586', '1511609057', '1', '3', '0', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('10', 'mysql主从数据库实现数据同步', 'Mysql|数据同步|主从数据库', '黑牛儿', 'mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。\r\n趁着这段时间相对空闲，也就自己实现一遍。\r\n尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。', '	  mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。趁着这段时间相对空闲，也就自己实现一遍。尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。\r\n	环境:\r\n	主服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.107\r\n	从服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.109\r\n	主服务器test数据库\r\n\r\n	CREATE TABLE `menber` (\r\n	`name` varchar(255) DEFAULT NULL default \'\',\r\n	`id` int(11) NOT NULL AUTO_INCREMENT,\r\n	PRIMARY KEY (`id`)\r\n	) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\r\n	insert into `menber` (`name`, `id`) values(\'zhangsan\',\'1\');\r\n	insert into `menber` (`name`, `id`) values(\'lisi\',\'2\');\r\n	insert into `menber` (`name`, `id`) values(\'王五\',\'3\');\r\n\r\n	mysql默认配置文件，如不特殊指定默认为/etc/my.cnf\r\n	mysql配置文件查找顺序：/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\r\n	配置：\r\n	一、主服务器\r\n	1.1、创建一个复制用户，具有replication slave 权限。\r\n	mysql>grant replication slave on *.* to \'repl\'@\'192.168.0.109\' identified by \'repl\';\r\n	mysql>flush privileges;\r\n	1.2、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	  server-id=107\r\n	并开启log-bin二进制日志文件（Mysql需要有/var/lib/mysql/目录的读写权限【可通过chown -R mysql:mysql /var/lib/mysql命令进行更改】）\r\n	  log-bin=/var/lib/mysql/mysql-bin\r\n	#指定绝对路径，否者会出现mysql运行show master status;时无法查看日志情况\r\n	mysql> show master status;\r\n	Empty set (0.00 sec)\r\n	mysql> show binary logs;\r\n	ERROR 1381 (HY000): You are not using binary logging\r\n	其他扩展配置项：　\r\n	binlog-do-db=mysql1 #需要备份的数据库名，如果备份多个数据库，重复设置这个选项 即可\r\n	binlog-ignore-db=mysql2 #不需要备份的数据库名，如果备份多个数据库，重复设置这 个选项即可\r\n	log-slave-updates=1 #这个参数一定要加上，否则不会给更新的记录些到二进制文件 里\r\n	slave-skip-errors=1 #是跳过错误，继续执行复制操作(可选)\r\n	1.3、重启mysql数据库\r\n	service mysqld restart\r\n	1.4、设置读锁\r\n	mysql>flush tables with read lock;\r\n	1.5、得到binlog日志文件名和偏移量（此处记住File名称和Position值，后面slave服务器配置时需要用到）\r\n\r\n	mysql> show master status;\r\n	+------------------+----------+--------------+------------------+\r\n	| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n	+------------------+----------+--------------+------------------+\r\n	| mysql-bin.000001 |      713 |              |                  |\r\n	+------------------+----------+--------------+------------------+\r\n	1 row in set (0.00 sec)\r\n\r\n\r\n	1.6、备份要同步的数据库\r\n	mysqldump test > test.sql\r\n	1.7、解锁\r\n	mysql>unlock tables;\r\n\r\n	二、从服务器（192.168.0.109）\r\n	将master（192.168.0.107）备份的数据库数据恢复到slave从服务器（192.168.0.109）\r\n	2.1、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	server-id=109\r\n	2.2、重启从数据库\r\n	service mysqld restart\r\n	2.3、对从数据库进行相应设置\r\n	  此处要注意logfile的名称和position的值，其余host、user和password为主数据库设置的账号和密码\r\n\r\n	mysql> stop slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> change master to \r\n	   -> master_host=\'192.168.0.107\',\r\n	   -> master_user=\'repl\',\r\n	   -> master_password=\'repl\',\r\n	   -> master_log_file=\'mysql-bin.000001\',\r\n	   -> master_log_pos=713;\r\n	mysql> start slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> show slave status\\G;\r\n	*************************** 1. row ***************************\r\n	Slave_IO_State: Waiting for master to send event\r\n	Master_Host: 192.168.0.107\r\n	Master_User: repl\r\n	Master_Port: 3306\r\n	Connect_Retry: 60\r\n	Master_Log_File: mysql-bin.000001\r\n	Read_Master_Log_Pos: 1079\r\n	Relay_Log_File: mysqld-relay-bin.000004\r\n	Relay_Log_Pos: 251\r\n	Relay_Master_Log_File: mysql-bin.000001\r\n	Slave_IO_Running: Yes\r\n	Slave_SQL_Running: Yes\r\n	Replicate_Do_DB: \r\n	Replicate_Ignore_DB: \r\n	Replicate_Do_Table: \r\n	Replicate_Ignore_Table: \r\n	Replicate_Wild_Do_Table: \r\n	Replicate_Wild_Ignore_Table: \r\n	Last_Errno: 0\r\n	Last_Error: \r\n	Skip_Counter: 0\r\n	Exec_Master_Log_Pos: 1079\r\n	Relay_Log_Space: 407\r\n	Until_Condition: None\r\n	Until_Log_File: \r\n	Until_Log_Pos: 0\r\n	Master_SSL_Allowed: No\r\n	Master_SSL_CA_File: \r\n	Master_SSL_CA_Path: \r\n	Master_SSL_Cert: \r\n	Master_SSL_Cipher: \r\n	Master_SSL_Key: \r\n	Seconds_Behind_Master: 0\r\n	Master_SSL_Verify_Server_Cert: No\r\n	Last_IO_Errno: 0\r\n	Last_IO_Error: \r\n	Last_SQL_Errno: 0\r\n	Last_SQL_Error: \r\n	1 row in set (0.00 sec)\r\n	ERROR: \r\n	No query specified\r\n\r\n	在这里主要是看:\r\n	  Slave_IO_Running=Yes\r\n	  Slave_SQL_Running=Yes\r\n	如果出现Slave_IO_Running: No或Slave_SQL_Running: NO；需要检查主服务器防火墙，可关闭防火墙或者开发数据库连接端口，或者重做2.3、对从数据库进行相应设置\r\n	三、测试：\r\n	  上述项配置完以后可查看master和slave上线程的状态。在master上，你可以看到slave的I/O线程创建的连接：在master上输入show processlist\\G;\r\n\r\n	mysql> show processlist\\G;\r\n	*************************** 1. row ***************************\r\n		 Id: 4\r\n	   User: root\r\n	   Host: localhost\r\n		 db: NULL\r\n	Command: Query\r\n	   Time: 0\r\n	  State: NULL\r\n	   Info: show processlist\r\n	*************************** 2. row ***************************\r\n		 Id: 19\r\n	   User: repl\r\n	   Host: 192.168.0.109:42337\r\n		 db: NULL\r\n	Command: Binlog Dump\r\n	   Time: 183\r\n	  State: Has sent all binlog to slave; waiting for binlog to be updated\r\n	   Info: NULL\r\n	2 rows in set (0.00 sec)\r\n\r\n	ERROR: \r\n	No query specified\r\n\r\n	  3.1、在主数据库：192.168.0.107上添加新数据\r\n	insert into `menber` (`name`) values(\'李八\');insert into `menber` (`name`) values(\'苍井空\');\r\n	3.2从数据库：192.168.0.109上查看数据库\r\n\r\n	mysql> select * from menber;\r\n	+-----------+----+\r\n	| name      | id |\r\n	+-----------+----+\r\n	| zhangsan  |  1 |\r\n	| lisi      |  2 |\r\n	| 王五    |  3 |\r\n	| 李八    |  4 |\r\n	| 苍井空 |  5 |\r\n	+-----------+----+\r\n	5 rows in set (0.02 sec)', '1511586586', '1511609041', '1', '2', '0', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('11', 'mysql主从数据库实现数据同步', 'Mysql|数据同步|主从数据库', '黑牛儿', 'mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。\r\n趁着这段时间相对空闲，也就自己实现一遍。\r\n尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。', '	  mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。趁着这段时间相对空闲，也就自己实现一遍。尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。\r\n	环境:\r\n	主服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.107\r\n	从服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.109\r\n	主服务器test数据库\r\n\r\n	CREATE TABLE `menber` (\r\n	`name` varchar(255) DEFAULT NULL default \'\',\r\n	`id` int(11) NOT NULL AUTO_INCREMENT,\r\n	PRIMARY KEY (`id`)\r\n	) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\r\n	insert into `menber` (`name`, `id`) values(\'zhangsan\',\'1\');\r\n	insert into `menber` (`name`, `id`) values(\'lisi\',\'2\');\r\n	insert into `menber` (`name`, `id`) values(\'王五\',\'3\');\r\n\r\n	mysql默认配置文件，如不特殊指定默认为/etc/my.cnf\r\n	mysql配置文件查找顺序：/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\r\n	配置：\r\n	一、主服务器\r\n	1.1、创建一个复制用户，具有replication slave 权限。\r\n	mysql>grant replication slave on *.* to \'repl\'@\'192.168.0.109\' identified by \'repl\';\r\n	mysql>flush privileges;\r\n	1.2、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	  server-id=107\r\n	并开启log-bin二进制日志文件（Mysql需要有/var/lib/mysql/目录的读写权限【可通过chown -R mysql:mysql /var/lib/mysql命令进行更改】）\r\n	  log-bin=/var/lib/mysql/mysql-bin\r\n	#指定绝对路径，否者会出现mysql运行show master status;时无法查看日志情况\r\n	mysql> show master status;\r\n	Empty set (0.00 sec)\r\n	mysql> show binary logs;\r\n	ERROR 1381 (HY000): You are not using binary logging\r\n	其他扩展配置项：　\r\n	binlog-do-db=mysql1 #需要备份的数据库名，如果备份多个数据库，重复设置这个选项 即可\r\n	binlog-ignore-db=mysql2 #不需要备份的数据库名，如果备份多个数据库，重复设置这 个选项即可\r\n	log-slave-updates=1 #这个参数一定要加上，否则不会给更新的记录些到二进制文件 里\r\n	slave-skip-errors=1 #是跳过错误，继续执行复制操作(可选)\r\n	1.3、重启mysql数据库\r\n	service mysqld restart\r\n	1.4、设置读锁\r\n	mysql>flush tables with read lock;\r\n	1.5、得到binlog日志文件名和偏移量（此处记住File名称和Position值，后面slave服务器配置时需要用到）\r\n\r\n	mysql> show master status;\r\n	+------------------+----------+--------------+------------------+\r\n	| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n	+------------------+----------+--------------+------------------+\r\n	| mysql-bin.000001 |      713 |              |                  |\r\n	+------------------+----------+--------------+------------------+\r\n	1 row in set (0.00 sec)\r\n\r\n\r\n	1.6、备份要同步的数据库\r\n	mysqldump test > test.sql\r\n	1.7、解锁\r\n	mysql>unlock tables;\r\n\r\n	二、从服务器（192.168.0.109）\r\n	将master（192.168.0.107）备份的数据库数据恢复到slave从服务器（192.168.0.109）\r\n	2.1、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	server-id=109\r\n	2.2、重启从数据库\r\n	service mysqld restart\r\n	2.3、对从数据库进行相应设置\r\n	  此处要注意logfile的名称和position的值，其余host、user和password为主数据库设置的账号和密码\r\n\r\n	mysql> stop slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> change master to \r\n	   -> master_host=\'192.168.0.107\',\r\n	   -> master_user=\'repl\',\r\n	   -> master_password=\'repl\',\r\n	   -> master_log_file=\'mysql-bin.000001\',\r\n	   -> master_log_pos=713;\r\n	mysql> start slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> show slave status\\G;\r\n	*************************** 1. row ***************************\r\n	Slave_IO_State: Waiting for master to send event\r\n	Master_Host: 192.168.0.107\r\n	Master_User: repl\r\n	Master_Port: 3306\r\n	Connect_Retry: 60\r\n	Master_Log_File: mysql-bin.000001\r\n	Read_Master_Log_Pos: 1079\r\n	Relay_Log_File: mysqld-relay-bin.000004\r\n	Relay_Log_Pos: 251\r\n	Relay_Master_Log_File: mysql-bin.000001\r\n	Slave_IO_Running: Yes\r\n	Slave_SQL_Running: Yes\r\n	Replicate_Do_DB: \r\n	Replicate_Ignore_DB: \r\n	Replicate_Do_Table: \r\n	Replicate_Ignore_Table: \r\n	Replicate_Wild_Do_Table: \r\n	Replicate_Wild_Ignore_Table: \r\n	Last_Errno: 0\r\n	Last_Error: \r\n	Skip_Counter: 0\r\n	Exec_Master_Log_Pos: 1079\r\n	Relay_Log_Space: 407\r\n	Until_Condition: None\r\n	Until_Log_File: \r\n	Until_Log_Pos: 0\r\n	Master_SSL_Allowed: No\r\n	Master_SSL_CA_File: \r\n	Master_SSL_CA_Path: \r\n	Master_SSL_Cert: \r\n	Master_SSL_Cipher: \r\n	Master_SSL_Key: \r\n	Seconds_Behind_Master: 0\r\n	Master_SSL_Verify_Server_Cert: No\r\n	Last_IO_Errno: 0\r\n	Last_IO_Error: \r\n	Last_SQL_Errno: 0\r\n	Last_SQL_Error: \r\n	1 row in set (0.00 sec)\r\n	ERROR: \r\n	No query specified\r\n\r\n	在这里主要是看:\r\n	  Slave_IO_Running=Yes\r\n	  Slave_SQL_Running=Yes\r\n	如果出现Slave_IO_Running: No或Slave_SQL_Running: NO；需要检查主服务器防火墙，可关闭防火墙或者开发数据库连接端口，或者重做2.3、对从数据库进行相应设置\r\n	三、测试：\r\n	  上述项配置完以后可查看master和slave上线程的状态。在master上，你可以看到slave的I/O线程创建的连接：在master上输入show processlist\\G;\r\n\r\n	mysql> show processlist\\G;\r\n	*************************** 1. row ***************************\r\n		 Id: 4\r\n	   User: root\r\n	   Host: localhost\r\n		 db: NULL\r\n	Command: Query\r\n	   Time: 0\r\n	  State: NULL\r\n	   Info: show processlist\r\n	*************************** 2. row ***************************\r\n		 Id: 19\r\n	   User: repl\r\n	   Host: 192.168.0.109:42337\r\n		 db: NULL\r\n	Command: Binlog Dump\r\n	   Time: 183\r\n	  State: Has sent all binlog to slave; waiting for binlog to be updated\r\n	   Info: NULL\r\n	2 rows in set (0.00 sec)\r\n\r\n	ERROR: \r\n	No query specified\r\n\r\n	  3.1、在主数据库：192.168.0.107上添加新数据\r\n	insert into `menber` (`name`) values(\'李八\');insert into `menber` (`name`) values(\'苍井空\');\r\n	3.2从数据库：192.168.0.109上查看数据库\r\n\r\n	mysql> select * from menber;\r\n	+-----------+----+\r\n	| name      | id |\r\n	+-----------+----+\r\n	| zhangsan  |  1 |\r\n	| lisi      |  2 |\r\n	| 王五    |  3 |\r\n	| 李八    |  4 |\r\n	| 苍井空 |  5 |\r\n	+-----------+----+\r\n	5 rows in set (0.02 sec)', '1511586586', '1511609015', '1', '2', '0', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('12', 'mysql主从数据库实现数据同步', 'Mysql|数据同步|主从数据库', '黑牛儿', 'mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。\r\n趁着这段时间相对空闲，也就自己实现一遍。\r\n尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。', '	  mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。趁着这段时间相对空闲，也就自己实现一遍。尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。\r\n	环境:\r\n	主服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.107\r\n	从服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.109\r\n	主服务器test数据库\r\n\r\n	CREATE TABLE `menber` (\r\n	`name` varchar(255) DEFAULT NULL default \'\',\r\n	`id` int(11) NOT NULL AUTO_INCREMENT,\r\n	PRIMARY KEY (`id`)\r\n	) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\r\n	insert into `menber` (`name`, `id`) values(\'zhangsan\',\'1\');\r\n	insert into `menber` (`name`, `id`) values(\'lisi\',\'2\');\r\n	insert into `menber` (`name`, `id`) values(\'王五\',\'3\');\r\n\r\n	mysql默认配置文件，如不特殊指定默认为/etc/my.cnf\r\n	mysql配置文件查找顺序：/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\r\n	配置：\r\n	一、主服务器\r\n	1.1、创建一个复制用户，具有replication slave 权限。\r\n	mysql>grant replication slave on *.* to \'repl\'@\'192.168.0.109\' identified by \'repl\';\r\n	mysql>flush privileges;\r\n	1.2、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	  server-id=107\r\n	并开启log-bin二进制日志文件（Mysql需要有/var/lib/mysql/目录的读写权限【可通过chown -R mysql:mysql /var/lib/mysql命令进行更改】）\r\n	  log-bin=/var/lib/mysql/mysql-bin\r\n	#指定绝对路径，否者会出现mysql运行show master status;时无法查看日志情况\r\n	mysql> show master status;\r\n	Empty set (0.00 sec)\r\n	mysql> show binary logs;\r\n	ERROR 1381 (HY000): You are not using binary logging\r\n	其他扩展配置项：　\r\n	binlog-do-db=mysql1 #需要备份的数据库名，如果备份多个数据库，重复设置这个选项 即可\r\n	binlog-ignore-db=mysql2 #不需要备份的数据库名，如果备份多个数据库，重复设置这 个选项即可\r\n	log-slave-updates=1 #这个参数一定要加上，否则不会给更新的记录些到二进制文件 里\r\n	slave-skip-errors=1 #是跳过错误，继续执行复制操作(可选)\r\n	1.3、重启mysql数据库\r\n	service mysqld restart\r\n	1.4、设置读锁\r\n	mysql>flush tables with read lock;\r\n	1.5、得到binlog日志文件名和偏移量（此处记住File名称和Position值，后面slave服务器配置时需要用到）\r\n\r\n	mysql> show master status;\r\n	+------------------+----------+--------------+------------------+\r\n	| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n	+------------------+----------+--------------+------------------+\r\n	| mysql-bin.000001 |      713 |              |                  |\r\n	+------------------+----------+--------------+------------------+\r\n	1 row in set (0.00 sec)\r\n\r\n\r\n	1.6、备份要同步的数据库\r\n	mysqldump test > test.sql\r\n	1.7、解锁\r\n	mysql>unlock tables;\r\n\r\n	二、从服务器（192.168.0.109）\r\n	将master（192.168.0.107）备份的数据库数据恢复到slave从服务器（192.168.0.109）\r\n	2.1、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	server-id=109\r\n	2.2、重启从数据库\r\n	service mysqld restart\r\n	2.3、对从数据库进行相应设置\r\n	  此处要注意logfile的名称和position的值，其余host、user和password为主数据库设置的账号和密码\r\n\r\n	mysql> stop slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> change master to \r\n	   -> master_host=\'192.168.0.107\',\r\n	   -> master_user=\'repl\',\r\n	   -> master_password=\'repl\',\r\n	   -> master_log_file=\'mysql-bin.000001\',\r\n	   -> master_log_pos=713;\r\n	mysql> start slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> show slave status\\G;\r\n	*************************** 1. row ***************************\r\n	Slave_IO_State: Waiting for master to send event\r\n	Master_Host: 192.168.0.107\r\n	Master_User: repl\r\n	Master_Port: 3306\r\n	Connect_Retry: 60\r\n	Master_Log_File: mysql-bin.000001\r\n	Read_Master_Log_Pos: 1079\r\n	Relay_Log_File: mysqld-relay-bin.000004\r\n	Relay_Log_Pos: 251\r\n	Relay_Master_Log_File: mysql-bin.000001\r\n	Slave_IO_Running: Yes\r\n	Slave_SQL_Running: Yes\r\n	Replicate_Do_DB: \r\n	Replicate_Ignore_DB: \r\n	Replicate_Do_Table: \r\n	Replicate_Ignore_Table: \r\n	Replicate_Wild_Do_Table: \r\n	Replicate_Wild_Ignore_Table: \r\n	Last_Errno: 0\r\n	Last_Error: \r\n	Skip_Counter: 0\r\n	Exec_Master_Log_Pos: 1079\r\n	Relay_Log_Space: 407\r\n	Until_Condition: None\r\n	Until_Log_File: \r\n	Until_Log_Pos: 0\r\n	Master_SSL_Allowed: No\r\n	Master_SSL_CA_File: \r\n	Master_SSL_CA_Path: \r\n	Master_SSL_Cert: \r\n	Master_SSL_Cipher: \r\n	Master_SSL_Key: \r\n	Seconds_Behind_Master: 0\r\n	Master_SSL_Verify_Server_Cert: No\r\n	Last_IO_Errno: 0\r\n	Last_IO_Error: \r\n	Last_SQL_Errno: 0\r\n	Last_SQL_Error: \r\n	1 row in set (0.00 sec)\r\n	ERROR: \r\n	No query specified\r\n\r\n	在这里主要是看:\r\n	  Slave_IO_Running=Yes\r\n	  Slave_SQL_Running=Yes\r\n	如果出现Slave_IO_Running: No或Slave_SQL_Running: NO；需要检查主服务器防火墙，可关闭防火墙或者开发数据库连接端口，或者重做2.3、对从数据库进行相应设置\r\n	三、测试：\r\n	  上述项配置完以后可查看master和slave上线程的状态。在master上，你可以看到slave的I/O线程创建的连接：在master上输入show processlist\\G;\r\n\r\n	mysql> show processlist\\G;\r\n	*************************** 1. row ***************************\r\n		 Id: 4\r\n	   User: root\r\n	   Host: localhost\r\n		 db: NULL\r\n	Command: Query\r\n	   Time: 0\r\n	  State: NULL\r\n	   Info: show processlist\r\n	*************************** 2. row ***************************\r\n		 Id: 19\r\n	   User: repl\r\n	   Host: 192.168.0.109:42337\r\n		 db: NULL\r\n	Command: Binlog Dump\r\n	   Time: 183\r\n	  State: Has sent all binlog to slave; waiting for binlog to be updated\r\n	   Info: NULL\r\n	2 rows in set (0.00 sec)\r\n\r\n	ERROR: \r\n	No query specified\r\n\r\n	  3.1、在主数据库：192.168.0.107上添加新数据\r\n	insert into `menber` (`name`) values(\'李八\');insert into `menber` (`name`) values(\'苍井空\');\r\n	3.2从数据库：192.168.0.109上查看数据库\r\n\r\n	mysql> select * from menber;\r\n	+-----------+----+\r\n	| name      | id |\r\n	+-----------+----+\r\n	| zhangsan  |  1 |\r\n	| lisi      |  2 |\r\n	| 王五    |  3 |\r\n	| 李八    |  4 |\r\n	| 苍井空 |  5 |\r\n	+-----------+----+\r\n	5 rows in set (0.02 sec)', '1511586586', '1511609024', '1', '3', '0', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('13', 'mysql主从数据库实现数据同步', 'Mysql|数据同步|主从数据库', '黑牛儿', 'mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。\r\n趁着这段时间相对空闲，也就自己实现一遍。\r\n尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。', '	  mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。趁着这段时间相对空闲，也就自己实现一遍。尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。\r\n	环境:\r\n	主服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.107\r\n	从服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.109\r\n	主服务器test数据库\r\n\r\n	CREATE TABLE `menber` (\r\n	`name` varchar(255) DEFAULT NULL default \'\',\r\n	`id` int(11) NOT NULL AUTO_INCREMENT,\r\n	PRIMARY KEY (`id`)\r\n	) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\r\n	insert into `menber` (`name`, `id`) values(\'zhangsan\',\'1\');\r\n	insert into `menber` (`name`, `id`) values(\'lisi\',\'2\');\r\n	insert into `menber` (`name`, `id`) values(\'王五\',\'3\');\r\n\r\n	mysql默认配置文件，如不特殊指定默认为/etc/my.cnf\r\n	mysql配置文件查找顺序：/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\r\n	配置：\r\n	一、主服务器\r\n	1.1、创建一个复制用户，具有replication slave 权限。\r\n	mysql>grant replication slave on *.* to \'repl\'@\'192.168.0.109\' identified by \'repl\';\r\n	mysql>flush privileges;\r\n	1.2、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	  server-id=107\r\n	并开启log-bin二进制日志文件（Mysql需要有/var/lib/mysql/目录的读写权限【可通过chown -R mysql:mysql /var/lib/mysql命令进行更改】）\r\n	  log-bin=/var/lib/mysql/mysql-bin\r\n	#指定绝对路径，否者会出现mysql运行show master status;时无法查看日志情况\r\n	mysql> show master status;\r\n	Empty set (0.00 sec)\r\n	mysql> show binary logs;\r\n	ERROR 1381 (HY000): You are not using binary logging\r\n	其他扩展配置项：　\r\n	binlog-do-db=mysql1 #需要备份的数据库名，如果备份多个数据库，重复设置这个选项 即可\r\n	binlog-ignore-db=mysql2 #不需要备份的数据库名，如果备份多个数据库，重复设置这 个选项即可\r\n	log-slave-updates=1 #这个参数一定要加上，否则不会给更新的记录些到二进制文件 里\r\n	slave-skip-errors=1 #是跳过错误，继续执行复制操作(可选)\r\n	1.3、重启mysql数据库\r\n	service mysqld restart\r\n	1.4、设置读锁\r\n	mysql>flush tables with read lock;\r\n	1.5、得到binlog日志文件名和偏移量（此处记住File名称和Position值，后面slave服务器配置时需要用到）\r\n\r\n	mysql> show master status;\r\n	+------------------+----------+--------------+------------------+\r\n	| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n	+------------------+----------+--------------+------------------+\r\n	| mysql-bin.000001 |      713 |              |                  |\r\n	+------------------+----------+--------------+------------------+\r\n	1 row in set (0.00 sec)\r\n\r\n\r\n	1.6、备份要同步的数据库\r\n	mysqldump test > test.sql\r\n	1.7、解锁\r\n	mysql>unlock tables;\r\n\r\n	二、从服务器（192.168.0.109）\r\n	将master（192.168.0.107）备份的数据库数据恢复到slave从服务器（192.168.0.109）\r\n	2.1、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	server-id=109\r\n	2.2、重启从数据库\r\n	service mysqld restart\r\n	2.3、对从数据库进行相应设置\r\n	  此处要注意logfile的名称和position的值，其余host、user和password为主数据库设置的账号和密码\r\n\r\n	mysql> stop slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> change master to \r\n	   -> master_host=\'192.168.0.107\',\r\n	   -> master_user=\'repl\',\r\n	   -> master_password=\'repl\',\r\n	   -> master_log_file=\'mysql-bin.000001\',\r\n	   -> master_log_pos=713;\r\n	mysql> start slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> show slave status\\G;\r\n	*************************** 1. row ***************************\r\n	Slave_IO_State: Waiting for master to send event\r\n	Master_Host: 192.168.0.107\r\n	Master_User: repl\r\n	Master_Port: 3306\r\n	Connect_Retry: 60\r\n	Master_Log_File: mysql-bin.000001\r\n	Read_Master_Log_Pos: 1079\r\n	Relay_Log_File: mysqld-relay-bin.000004\r\n	Relay_Log_Pos: 251\r\n	Relay_Master_Log_File: mysql-bin.000001\r\n	Slave_IO_Running: Yes\r\n	Slave_SQL_Running: Yes\r\n	Replicate_Do_DB: \r\n	Replicate_Ignore_DB: \r\n	Replicate_Do_Table: \r\n	Replicate_Ignore_Table: \r\n	Replicate_Wild_Do_Table: \r\n	Replicate_Wild_Ignore_Table: \r\n	Last_Errno: 0\r\n	Last_Error: \r\n	Skip_Counter: 0\r\n	Exec_Master_Log_Pos: 1079\r\n	Relay_Log_Space: 407\r\n	Until_Condition: None\r\n	Until_Log_File: \r\n	Until_Log_Pos: 0\r\n	Master_SSL_Allowed: No\r\n	Master_SSL_CA_File: \r\n	Master_SSL_CA_Path: \r\n	Master_SSL_Cert: \r\n	Master_SSL_Cipher: \r\n	Master_SSL_Key: \r\n	Seconds_Behind_Master: 0\r\n	Master_SSL_Verify_Server_Cert: No\r\n	Last_IO_Errno: 0\r\n	Last_IO_Error: \r\n	Last_SQL_Errno: 0\r\n	Last_SQL_Error: \r\n	1 row in set (0.00 sec)\r\n	ERROR: \r\n	No query specified\r\n\r\n	在这里主要是看:\r\n	  Slave_IO_Running=Yes\r\n	  Slave_SQL_Running=Yes\r\n	如果出现Slave_IO_Running: No或Slave_SQL_Running: NO；需要检查主服务器防火墙，可关闭防火墙或者开发数据库连接端口，或者重做2.3、对从数据库进行相应设置\r\n	三、测试：\r\n	  上述项配置完以后可查看master和slave上线程的状态。在master上，你可以看到slave的I/O线程创建的连接：在master上输入show processlist\\G;\r\n\r\n	mysql> show processlist\\G;\r\n	*************************** 1. row ***************************\r\n		 Id: 4\r\n	   User: root\r\n	   Host: localhost\r\n		 db: NULL\r\n	Command: Query\r\n	   Time: 0\r\n	  State: NULL\r\n	   Info: show processlist\r\n	*************************** 2. row ***************************\r\n		 Id: 19\r\n	   User: repl\r\n	   Host: 192.168.0.109:42337\r\n		 db: NULL\r\n	Command: Binlog Dump\r\n	   Time: 183\r\n	  State: Has sent all binlog to slave; waiting for binlog to be updated\r\n	   Info: NULL\r\n	2 rows in set (0.00 sec)\r\n\r\n	ERROR: \r\n	No query specified\r\n\r\n	  3.1、在主数据库：192.168.0.107上添加新数据\r\n	insert into `menber` (`name`) values(\'李八\');insert into `menber` (`name`) values(\'苍井空\');\r\n	3.2从数据库：192.168.0.109上查看数据库\r\n\r\n	mysql> select * from menber;\r\n	+-----------+----+\r\n	| name      | id |\r\n	+-----------+----+\r\n	| zhangsan  |  1 |\r\n	| lisi      |  2 |\r\n	| 王五    |  3 |\r\n	| 李八    |  4 |\r\n	| 苍井空 |  5 |\r\n	+-----------+----+\r\n	5 rows in set (0.02 sec)', '1511586586', '1511609014', '1', '2', '0', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('14', 'mysql主从数据库实现数据同步', 'Mysql|数据同步|主从数据库', '黑牛儿', 'mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。\r\n趁着这段时间相对空闲，也就自己实现一遍。\r\n尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。', '	  mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。趁着这段时间相对空闲，也就自己实现一遍。尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。\r\n	环境:\r\n	主服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.107\r\n	从服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.109\r\n	主服务器test数据库\r\n\r\n	CREATE TABLE `menber` (\r\n	`name` varchar(255) DEFAULT NULL default \'\',\r\n	`id` int(11) NOT NULL AUTO_INCREMENT,\r\n	PRIMARY KEY (`id`)\r\n	) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\r\n	insert into `menber` (`name`, `id`) values(\'zhangsan\',\'1\');\r\n	insert into `menber` (`name`, `id`) values(\'lisi\',\'2\');\r\n	insert into `menber` (`name`, `id`) values(\'王五\',\'3\');\r\n\r\n	mysql默认配置文件，如不特殊指定默认为/etc/my.cnf\r\n	mysql配置文件查找顺序：/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\r\n	配置：\r\n	一、主服务器\r\n	1.1、创建一个复制用户，具有replication slave 权限。\r\n	mysql>grant replication slave on *.* to \'repl\'@\'192.168.0.109\' identified by \'repl\';\r\n	mysql>flush privileges;\r\n	1.2、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	  server-id=107\r\n	并开启log-bin二进制日志文件（Mysql需要有/var/lib/mysql/目录的读写权限【可通过chown -R mysql:mysql /var/lib/mysql命令进行更改】）\r\n	  log-bin=/var/lib/mysql/mysql-bin\r\n	#指定绝对路径，否者会出现mysql运行show master status;时无法查看日志情况\r\n	mysql> show master status;\r\n	Empty set (0.00 sec)\r\n	mysql> show binary logs;\r\n	ERROR 1381 (HY000): You are not using binary logging\r\n	其他扩展配置项：　\r\n	binlog-do-db=mysql1 #需要备份的数据库名，如果备份多个数据库，重复设置这个选项 即可\r\n	binlog-ignore-db=mysql2 #不需要备份的数据库名，如果备份多个数据库，重复设置这 个选项即可\r\n	log-slave-updates=1 #这个参数一定要加上，否则不会给更新的记录些到二进制文件 里\r\n	slave-skip-errors=1 #是跳过错误，继续执行复制操作(可选)\r\n	1.3、重启mysql数据库\r\n	service mysqld restart\r\n	1.4、设置读锁\r\n	mysql>flush tables with read lock;\r\n	1.5、得到binlog日志文件名和偏移量（此处记住File名称和Position值，后面slave服务器配置时需要用到）\r\n\r\n	mysql> show master status;\r\n	+------------------+----------+--------------+------------------+\r\n	| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n	+------------------+----------+--------------+------------------+\r\n	| mysql-bin.000001 |      713 |              |                  |\r\n	+------------------+----------+--------------+------------------+\r\n	1 row in set (0.00 sec)\r\n\r\n\r\n	1.6、备份要同步的数据库\r\n	mysqldump test > test.sql\r\n	1.7、解锁\r\n	mysql>unlock tables;\r\n\r\n	二、从服务器（192.168.0.109）\r\n	将master（192.168.0.107）备份的数据库数据恢复到slave从服务器（192.168.0.109）\r\n	2.1、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	server-id=109\r\n	2.2、重启从数据库\r\n	service mysqld restart\r\n	2.3、对从数据库进行相应设置\r\n	  此处要注意logfile的名称和position的值，其余host、user和password为主数据库设置的账号和密码\r\n\r\n	mysql> stop slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> change master to \r\n	   -> master_host=\'192.168.0.107\',\r\n	   -> master_user=\'repl\',\r\n	   -> master_password=\'repl\',\r\n	   -> master_log_file=\'mysql-bin.000001\',\r\n	   -> master_log_pos=713;\r\n	mysql> start slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> show slave status\\G;\r\n	*************************** 1. row ***************************\r\n	Slave_IO_State: Waiting for master to send event\r\n	Master_Host: 192.168.0.107\r\n	Master_User: repl\r\n	Master_Port: 3306\r\n	Connect_Retry: 60\r\n	Master_Log_File: mysql-bin.000001\r\n	Read_Master_Log_Pos: 1079\r\n	Relay_Log_File: mysqld-relay-bin.000004\r\n	Relay_Log_Pos: 251\r\n	Relay_Master_Log_File: mysql-bin.000001\r\n	Slave_IO_Running: Yes\r\n	Slave_SQL_Running: Yes\r\n	Replicate_Do_DB: \r\n	Replicate_Ignore_DB: \r\n	Replicate_Do_Table: \r\n	Replicate_Ignore_Table: \r\n	Replicate_Wild_Do_Table: \r\n	Replicate_Wild_Ignore_Table: \r\n	Last_Errno: 0\r\n	Last_Error: \r\n	Skip_Counter: 0\r\n	Exec_Master_Log_Pos: 1079\r\n	Relay_Log_Space: 407\r\n	Until_Condition: None\r\n	Until_Log_File: \r\n	Until_Log_Pos: 0\r\n	Master_SSL_Allowed: No\r\n	Master_SSL_CA_File: \r\n	Master_SSL_CA_Path: \r\n	Master_SSL_Cert: \r\n	Master_SSL_Cipher: \r\n	Master_SSL_Key: \r\n	Seconds_Behind_Master: 0\r\n	Master_SSL_Verify_Server_Cert: No\r\n	Last_IO_Errno: 0\r\n	Last_IO_Error: \r\n	Last_SQL_Errno: 0\r\n	Last_SQL_Error: \r\n	1 row in set (0.00 sec)\r\n	ERROR: \r\n	No query specified\r\n\r\n	在这里主要是看:\r\n	  Slave_IO_Running=Yes\r\n	  Slave_SQL_Running=Yes\r\n	如果出现Slave_IO_Running: No或Slave_SQL_Running: NO；需要检查主服务器防火墙，可关闭防火墙或者开发数据库连接端口，或者重做2.3、对从数据库进行相应设置\r\n	三、测试：\r\n	  上述项配置完以后可查看master和slave上线程的状态。在master上，你可以看到slave的I/O线程创建的连接：在master上输入show processlist\\G;\r\n\r\n	mysql> show processlist\\G;\r\n	*************************** 1. row ***************************\r\n		 Id: 4\r\n	   User: root\r\n	   Host: localhost\r\n		 db: NULL\r\n	Command: Query\r\n	   Time: 0\r\n	  State: NULL\r\n	   Info: show processlist\r\n	*************************** 2. row ***************************\r\n		 Id: 19\r\n	   User: repl\r\n	   Host: 192.168.0.109:42337\r\n		 db: NULL\r\n	Command: Binlog Dump\r\n	   Time: 183\r\n	  State: Has sent all binlog to slave; waiting for binlog to be updated\r\n	   Info: NULL\r\n	2 rows in set (0.00 sec)\r\n\r\n	ERROR: \r\n	No query specified\r\n\r\n	  3.1、在主数据库：192.168.0.107上添加新数据\r\n	insert into `menber` (`name`) values(\'李八\');insert into `menber` (`name`) values(\'苍井空\');\r\n	3.2从数据库：192.168.0.109上查看数据库\r\n\r\n	mysql> select * from menber;\r\n	+-----------+----+\r\n	| name      | id |\r\n	+-----------+----+\r\n	| zhangsan  |  1 |\r\n	| lisi      |  2 |\r\n	| 王五    |  3 |\r\n	| 李八    |  4 |\r\n	| 苍井空 |  5 |\r\n	+-----------+----+\r\n	5 rows in set (0.02 sec)', '1511586586', '1511609029', '1', '0', '0', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('15', 'mysql主从数据库实现数据同步', 'Mysql|数据同步|主从数据库', '黑牛儿', 'mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。\r\n趁着这段时间相对空闲，也就自己实现一遍。\r\n尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。', '	  mysql主从复制相信已经用得很多了，但是由于工作原因一直没怎么用过。趁着这段时间相对空闲，也就自己实现一遍。尽管互联网上已有大把类似的文章，但是自身实现的仍然值得记录。\r\n	环境:\r\n	主服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.107\r\n	从服务器:centos 6.0 mysql 5.1.67-log IP:192.168.0.109\r\n	主服务器test数据库\r\n\r\n	CREATE TABLE `menber` (\r\n	`name` varchar(255) DEFAULT NULL default \'\',\r\n	`id` int(11) NOT NULL AUTO_INCREMENT,\r\n	PRIMARY KEY (`id`)\r\n	) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\r\n	insert into `menber` (`name`, `id`) values(\'zhangsan\',\'1\');\r\n	insert into `menber` (`name`, `id`) values(\'lisi\',\'2\');\r\n	insert into `menber` (`name`, `id`) values(\'王五\',\'3\');\r\n\r\n	mysql默认配置文件，如不特殊指定默认为/etc/my.cnf\r\n	mysql配置文件查找顺序：/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\r\n	配置：\r\n	一、主服务器\r\n	1.1、创建一个复制用户，具有replication slave 权限。\r\n	mysql>grant replication slave on *.* to \'repl\'@\'192.168.0.109\' identified by \'repl\';\r\n	mysql>flush privileges;\r\n	1.2、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	  server-id=107\r\n	并开启log-bin二进制日志文件（Mysql需要有/var/lib/mysql/目录的读写权限【可通过chown -R mysql:mysql /var/lib/mysql命令进行更改】）\r\n	  log-bin=/var/lib/mysql/mysql-bin\r\n	#指定绝对路径，否者会出现mysql运行show master status;时无法查看日志情况\r\n	mysql> show master status;\r\n	Empty set (0.00 sec)\r\n	mysql> show binary logs;\r\n	ERROR 1381 (HY000): You are not using binary logging\r\n	其他扩展配置项：　\r\n	binlog-do-db=mysql1 #需要备份的数据库名，如果备份多个数据库，重复设置这个选项 即可\r\n	binlog-ignore-db=mysql2 #不需要备份的数据库名，如果备份多个数据库，重复设置这 个选项即可\r\n	log-slave-updates=1 #这个参数一定要加上，否则不会给更新的记录些到二进制文件 里\r\n	slave-skip-errors=1 #是跳过错误，继续执行复制操作(可选)\r\n	1.3、重启mysql数据库\r\n	service mysqld restart\r\n	1.4、设置读锁\r\n	mysql>flush tables with read lock;\r\n	1.5、得到binlog日志文件名和偏移量（此处记住File名称和Position值，后面slave服务器配置时需要用到）\r\n\r\n	mysql> show master status;\r\n	+------------------+----------+--------------+------------------+\r\n	| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n	+------------------+----------+--------------+------------------+\r\n	| mysql-bin.000001 |      713 |              |                  |\r\n	+------------------+----------+--------------+------------------+\r\n	1 row in set (0.00 sec)\r\n\r\n\r\n	1.6、备份要同步的数据库\r\n	mysqldump test > test.sql\r\n	1.7、解锁\r\n	mysql>unlock tables;\r\n\r\n	二、从服务器（192.168.0.109）\r\n	将master（192.168.0.107）备份的数据库数据恢复到slave从服务器（192.168.0.109）\r\n	2.1、编辑my.cnf文件\r\n	vi /etc/my.cnf\r\n	添加\r\n	server-id=109\r\n	2.2、重启从数据库\r\n	service mysqld restart\r\n	2.3、对从数据库进行相应设置\r\n	  此处要注意logfile的名称和position的值，其余host、user和password为主数据库设置的账号和密码\r\n\r\n	mysql> stop slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> change master to \r\n	   -> master_host=\'192.168.0.107\',\r\n	   -> master_user=\'repl\',\r\n	   -> master_password=\'repl\',\r\n	   -> master_log_file=\'mysql-bin.000001\',\r\n	   -> master_log_pos=713;\r\n	mysql> start slave;\r\n	Query OK, 0 rows affected (0.00 sec)\r\n	mysql> show slave status\\G;\r\n	*************************** 1. row ***************************\r\n	Slave_IO_State: Waiting for master to send event\r\n	Master_Host: 192.168.0.107\r\n	Master_User: repl\r\n	Master_Port: 3306\r\n	Connect_Retry: 60\r\n	Master_Log_File: mysql-bin.000001\r\n	Read_Master_Log_Pos: 1079\r\n	Relay_Log_File: mysqld-relay-bin.000004\r\n	Relay_Log_Pos: 251\r\n	Relay_Master_Log_File: mysql-bin.000001\r\n	Slave_IO_Running: Yes\r\n	Slave_SQL_Running: Yes\r\n	Replicate_Do_DB: \r\n	Replicate_Ignore_DB: \r\n	Replicate_Do_Table: \r\n	Replicate_Ignore_Table: \r\n	Replicate_Wild_Do_Table: \r\n	Replicate_Wild_Ignore_Table: \r\n	Last_Errno: 0\r\n	Last_Error: \r\n	Skip_Counter: 0\r\n	Exec_Master_Log_Pos: 1079\r\n	Relay_Log_Space: 407\r\n	Until_Condition: None\r\n	Until_Log_File: \r\n	Until_Log_Pos: 0\r\n	Master_SSL_Allowed: No\r\n	Master_SSL_CA_File: \r\n	Master_SSL_CA_Path: \r\n	Master_SSL_Cert: \r\n	Master_SSL_Cipher: \r\n	Master_SSL_Key: \r\n	Seconds_Behind_Master: 0\r\n	Master_SSL_Verify_Server_Cert: No\r\n	Last_IO_Errno: 0\r\n	Last_IO_Error: \r\n	Last_SQL_Errno: 0\r\n	Last_SQL_Error: \r\n	1 row in set (0.00 sec)\r\n	ERROR: \r\n	No query specified\r\n\r\n	在这里主要是看:\r\n	  Slave_IO_Running=Yes\r\n	  Slave_SQL_Running=Yes\r\n	如果出现Slave_IO_Running: No或Slave_SQL_Running: NO；需要检查主服务器防火墙，可关闭防火墙或者开发数据库连接端口，或者重做2.3、对从数据库进行相应设置\r\n	三、测试：\r\n	  上述项配置完以后可查看master和slave上线程的状态。在master上，你可以看到slave的I/O线程创建的连接：在master上输入show processlist\\G;\r\n\r\n	mysql> show processlist\\G;\r\n	*************************** 1. row ***************************\r\n		 Id: 4\r\n	   User: root\r\n	   Host: localhost\r\n		 db: NULL\r\n	Command: Query\r\n	   Time: 0\r\n	  State: NULL\r\n	   Info: show processlist\r\n	*************************** 2. row ***************************\r\n		 Id: 19\r\n	   User: repl\r\n	   Host: 192.168.0.109:42337\r\n		 db: NULL\r\n	Command: Binlog Dump\r\n	   Time: 183\r\n	  State: Has sent all binlog to slave; waiting for binlog to be updated\r\n	   Info: NULL\r\n	2 rows in set (0.00 sec)\r\n\r\n	ERROR: \r\n	No query specified\r\n\r\n	  3.1、在主数据库：192.168.0.107上添加新数据\r\n	insert into `menber` (`name`) values(\'李八\');insert into `menber` (`name`) values(\'苍井空\');\r\n	3.2从数据库：192.168.0.109上查看数据库\r\n\r\n	mysql> select * from menber;\r\n	+-----------+----+\r\n	| name      | id |\r\n	+-----------+----+\r\n	| zhangsan  |  1 |\r\n	| lisi      |  2 |\r\n	| 王五    |  3 |\r\n	| 李八    |  4 |\r\n	| 苍井空 |  5 |\r\n	+-----------+----+\r\n	5 rows in set (0.02 sec)', '1511586586', '1511609014', '1', '0', '0', '/static/tmpImg/201708252044567037.jpg', '0');
INSERT INTO `blog_article` VALUES ('16', '阿里云服务器 Centos 7 上安装LAMP web环境', 'Centos7 | LAMP|lamp|apache|mysql|PHP|阿里云 ', '黑牛儿', '阿里云服务器上 Centos7 系统上安装 web运行环境，这个是PHP程序猿必备技能，我的安装步骤，并记录在文章中，希望更多的人不走弯路。', '## 一、yum命令 安装apache(httpd)\r\n\r\n```\r\n 执行以下命令：  yum install httpd -y\r\n \r\n```\r\n```\r\n然后执行命令车看是否安装成功（能找到如：httpd-2.4.6-67.el7.centos.6.x86_64则成功） ： rpm -qa httpd \r\n```\r\n```\r\n启动httpd: systemctl start httpd\r\n```\r\n\r\n```\r\n查看启动状态： systemctl status httpd\r\n```\r\n出现以下结果则表示启动成功：\r\n\r\n```\r\n● httpd.service - The Apache HTTP Server\r\n   Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)\r\n   Active: active (running) since Fri 2017-12-01 10:04:33 CST; 19s ago\r\n     Docs: man:httpd(8)\r\n           man:apachectl(8)\r\n Main PID: 1374 (httpd)\r\n   Status: \"Total requests: 0; Current requests/sec: 0; Current traffic:   0 B/sec\"\r\n   CGroup: /system.slice/httpd.service\r\n           ├─1374 /usr/sbin/httpd -DFOREGROUND\r\n           ├─1375 /usr/sbin/httpd -DFOREGROUND\r\n           ├─1376 /usr/sbin/httpd -DFOREGROUND\r\n           ├─1377 /usr/sbin/httpd -DFOREGROUND\r\n           ├─1378 /usr/sbin/httpd -DFOREGROUND\r\n           └─1379 /usr/sbin/httpd -DFOREGROUND\r\n```\r\n到这里httpd(apache)就安装成功了；\r\n在浏览器中输入服务器ip则可以访问了；\r\n\r\n最后设置 开机自启动\r\n\r\n```\r\n执行命令：systemctl enable httpd.service\r\n\r\n成功结果：Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.\r\n\r\n```\r\n\r\n\r\n## 二、安装 Mysql（mariaDB）\r\n1. 配置mysql yum 源\r\n     利用wget命令在mysql官网中下载yum的安装包：http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\r\n```\r\n wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\r\n```\r\n2. 用yum命令mysql程序安装源\r\n    \r\n```\r\nyum localinstall mysql57-community-release-el7-8.noarch.rpm -y\r\n```\r\n3. 检查mysql安装源是否安装成功\r\n    \r\n```\r\n执行命令：yum repolist enabled | grep \"mysql.*\"\r\n出现以下结果则mysql源安装成功：\r\n \r\nmysql-connectors-community/x86_64 MySQL Connectors Community                  42\r\nmysql-tools-community/x86_64      MySQL Tools Community                       55\r\nmysql57-community/x86_64          MySQL 5.7 Community Server                 227\r\n```\r\n4.可以修改vim /etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本。比如要安装5.7版本，将5.6源的enabled=1改成enabled=0。然后再将5.7源的enabled=0改成enabled=1即可\r\n\r\n```\r\n[mysql-connectors-community]\r\nname=MySQL Connectors Community\r\nbaseurl=http://repo.mysql.com/yum/mysql-connectors-community/el/7/$basearch/\r\nenabled=1\r\ngpgcheck=1\r\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\r\n\r\n[mysql-tools-community]\r\nname=MySQL Tools Community\r\nbaseurl=http://repo.mysql.com/yum/mysql-tools-community/el/7/$basearch/\r\nenabled=1\r\ngpgcheck=1\r\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\r\n\r\n# Enable to use MySQL 5.5\r\n[mysql55-community]\r\nname=MySQL 5.5 Community Server\r\nbaseurl=http://repo.mysql.com/yum/mysql-5.5-community/el/7/$basearch/\r\nenabled=0\r\ngpgcheck=1\r\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\r\n\r\n# Enable to use MySQL 5.6\r\n[mysql56-community]\r\nname=MySQL 5.6 Community Server\r\nbaseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/\r\nenabled=0\r\ngpgcheck=1\r\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\r\n\r\n[mysql57-community]\r\nname=MySQL 5.7 Community Server\r\nbaseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/\r\nenabled=1\r\ngpgcheck=1\r\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\r\n\r\n[mysql-tools-preview]\r\nname=MySQL Tools Preview\r\nbaseurl=http://repo.mysql.com/yum/mysql-tools-preview/el/7/$basearch/\r\nenabled=0\r\ngpgcheck=1\r\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\r\n```\r\n5. 安装mysql 服务\r\n\r\n```\r\nyum install mysql-community-server\r\n```\r\n6. 启动mysqld服务\r\n\r\n```\r\n systemctl start  mysqld\r\n```\r\n\r\n```\r\n然后查看是否启动成功：systemctl status  mysqld\r\n```\r\n7. 修改root本地登录密码\r\n    mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：\r\n\r\n```\r\n执行命令：grep \'temporary password\' /var/log/mysqld.log\r\n\r\n结果：2017-12-01T02:54:11.303463Z 1 [Note] A temporary password is generated for root@localhost: 3CLYyf:4OsNm\r\n```\r\n有结果看出默认密码是：3CLYyf:4OsNm\r\n\r\n用默认密码登录修改root密码：\r\n\r\n```\r\nset password for \'root\'@\'localhost\'=password(\'MyNewPass4!\'); \r\n```\r\n\r\n==主要：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误。== \r\n\r\n8. 添加远程连接mysql用户\r\n\r\n    默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：\r\n    \r\n```\r\ngrant all privileges on *.* to \'dev\'@\'%\' identified by \'Dev2017!\' with grant option;\r\n```\r\n以上命令成功执行后就成功添加了一个 用户名未dev 的数据库用户\r\n\r\n在远程电脑上用navcate 通过 dev 用户和密码连接数据\r\n\r\n若失败，请关闭服务器防火墙 或者开放3306端口（命令自查）\r\n\r\n若还是不能正常连接\r\n\r\n就查看 阿里元安全规则，默认是没有运行3306端口的。\r\n\r\n然后再次远程连接。我到这一步就成功了\r\n\r\n最后设置开机自启动：\r\n```\r\n执行命令：systemctl enable mysqld.service\r\n```\r\n\r\n\r\n## 三、安装php5.6\r\n\r\n本内容参考网站：[http://blog.csdn.net/u010738364/article/details/75635334](http://blog.csdn.net/u010738364/article/details/75635334)\r\n\r\n\r\n1. 配置yum源\r\n    \r\n```\r\n rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\r\n```\r\n2. 确认yum源中有准备安装的程序版本\r\n\r\n```\r\nyum list --enablerepo=remi --enablerepo=remi-php56 | grep php\r\n```\r\n\r\n3. 安装php5.6\r\n    \r\n```\r\nyum install php56w php56w-mysql php56w-gd libjpeg* php56w-ldap php56w-odbc php56w-pear php56w-xml php56w-xmlrpc php56w-mbstring php56w-bcmath\r\n```\r\n一直 “Y”直到结束\r\n\r\n4.除了上面那些，其实还有一个包我们需要下载，是php的加密扩展库php-mhash,但在源里并没有看到，所以要单独下载。\r\n\r\n```\r\n yum -y install epel-release\r\n\r\nyum groupinstall \"development tools\"\r\n\r\nyum -y install mhash mhash-devel mcrypt\r\n```\r\n\r\n## 四、重启httpd、Mysql\r\n\r\n到此 LAMP环境配置完成', '1512456170', '1512458994', '1', '82', '0', '/static/tmpImg/201708252044567037.jpg', '0');

-- ----------------------------
-- Table structure for blog_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `blog_article_tag`;
CREATE TABLE `blog_article_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `tag` varchar(60) NOT NULL DEFAULT '' COMMENT '文章标签',
  `show_times` tinyint(11) NOT NULL DEFAULT '1' COMMENT '出现次数',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态；1：正常，2：屏蔽',
  PRIMARY KEY (`id`),
  KEY `idx_status` (`status`) USING BTREE,
  KEY `idx_showTimes` (`show_times`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=utf8 COMMENT='文章标签记录表';

-- ----------------------------
-- Records of blog_article_tag
-- ----------------------------
INSERT INTO `blog_article_tag` VALUES ('52', 'PHP', '2', '1');
INSERT INTO `blog_article_tag` VALUES ('53', 'IOS', '2', '1');
INSERT INTO `blog_article_tag` VALUES ('54', 'AI', '2', '1');
INSERT INTO `blog_article_tag` VALUES ('56', 'Mysql', '3', '1');
INSERT INTO `blog_article_tag` VALUES ('57', 'merge', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('58', '分表', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('59', 'Mysqlfenbiao', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('60', 'GIT', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('61', 'SSH', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('62', 'ssh key 创建', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('63', 'JS', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('64', 'Javascript', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('65', '金额转大写', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('66', '数据同步', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('67', '主从数据库', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('68', 'Centos7', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('69', 'LAMP', '2', '1');
INSERT INTO `blog_article_tag` VALUES ('70', 'apache', '1', '1');
INSERT INTO `blog_article_tag` VALUES ('71', '阿里云', '1', '1');

-- ----------------------------
-- Table structure for blog_friend_link
-- ----------------------------
DROP TABLE IF EXISTS `blog_friend_link`;
CREATE TABLE `blog_friend_link` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `web_name` varchar(255) NOT NULL DEFAULT '' COMMENT '网站名称',
  `web_url` varchar(255) NOT NULL DEFAULT '' COMMENT '网站链接地址',
  `create_time` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `click_num` int(11) NOT NULL DEFAULT '0' COMMENT '点击次数',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='友情链接数据表';

-- ----------------------------
-- Records of blog_friend_link
-- ----------------------------
INSERT INTO `blog_friend_link` VALUES ('1', ' 不落阁', 'http://www.lyblogs.cn/', '0', '2');
INSERT INTO `blog_friend_link` VALUES ('3', 'zuoqy', 'http://zuoqy.cn/', '0', '1');
INSERT INTO `blog_friend_link` VALUES ('4', 'WYW 一个人的博客', 'http://www.wuyuanwei.com/', '0', '0');
INSERT INTO `blog_friend_link` VALUES ('5', '晴枫', 'https://www.sunmale.cn/', '0', '0');

-- ----------------------------
-- Table structure for blog_leave_msg
-- ----------------------------
DROP TABLE IF EXISTS `blog_leave_msg`;
CREATE TABLE `blog_leave_msg` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `content` text CHARACTER SET utf8 NOT NULL COMMENT '留言内容',
  `pid` int(11) NOT NULL DEFAULT '0' COMMENT '上级Id',
  `user_id` int(11) NOT NULL DEFAULT '0' COMMENT '创建留言用户Id，0为游客',
  `create_time` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态：1：正常，0：屏蔽',
  `is_read` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否已读；0：未读，1：已读',
  PRIMARY KEY (`id`),
  KEY `idx_pid` (`pid`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1 COMMENT='访客留言列表';

-- ----------------------------
-- Records of blog_leave_msg
-- ----------------------------
INSERT INTO `blog_leave_msg` VALUES ('1', '<p>第一条留言<img alt=\"大笑\" src=\"/static/xheditor/xheditor_emot/default/laugh.gif\" /></p><p>测试</p>', '0', '0', '0', '1', '0');
INSERT INTO `blog_leave_msg` VALUES ('2', '第二条留言', '0', '0', '0', '1', '0');
INSERT INTO `blog_leave_msg` VALUES ('3', '第三条留言', '0', '0', '0', '1', '0');
INSERT INTO `blog_leave_msg` VALUES ('4', '<p><img alt=\"微笑\" src=\"/static/xheditor/xheditor_emot/default/smile.gif\" /><img alt=\"大哭\" src=\"/static/xheditor/xheditor_emot/default/wail.gif\" /><img alt=\"惊讶\" src=\"/static/xheditor/xheditor_emot/default/ohmy.gif\" /></p><p>第四条留言</p>', '0', '0', '0', '1', '0');

-- ----------------------------
-- Table structure for blog_menu
-- ----------------------------
DROP TABLE IF EXISTS `blog_menu`;
CREATE TABLE `blog_menu` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键Id',
  `pid` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '上级菜单ID',
  `name` varchar(60) NOT NULL DEFAULT '' COMMENT '菜单名称',
  `url` varchar(255) NOT NULL DEFAULT '' COMMENT '菜单链接地址',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态，1：启用，0：停用；停用后所有子菜单同时停用',
  `sort` int(11) NOT NULL DEFAULT '1' COMMENT '排序',
  PRIMARY KEY (`id`),
  KEY `idx_status` (`status`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8 COMMENT='后台菜单管理表';

-- ----------------------------
-- Records of blog_menu
-- ----------------------------
INSERT INTO `blog_menu` VALUES ('1', '0', '系统设置', '/MenuMange/MenuMange', '1', '2');
INSERT INTO `blog_menu` VALUES ('2', '1', '菜单管理', '/MenuMange/MenuMange', '1', '21');
INSERT INTO `blog_menu` VALUES ('3', '0', '首页', '/', '1', '1');
INSERT INTO `blog_menu` VALUES ('5', '0', '文章管理', '/ArticleManage/index', '1', '4');
INSERT INTO `blog_menu` VALUES ('6', '5', '类别管理', '/ArticleManage/index', '1', '42');
INSERT INTO `blog_menu` VALUES ('7', '5', '标签管理', '/', '1', '43');
INSERT INTO `blog_menu` VALUES ('16', '5', '文章列表', '/ArticleManage/index', '1', '41');
INSERT INTO `blog_menu` VALUES ('17', '1', '友情链接', '/FriendLink/index', '1', '22');
INSERT INTO `blog_menu` VALUES ('18', '1', '公告管理', '/Notice/index', '1', '23');

-- ----------------------------
-- Table structure for blog_notice
-- ----------------------------
DROP TABLE IF EXISTS `blog_notice`;
CREATE TABLE `blog_notice` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键Id',
  `content` text NOT NULL COMMENT '公告内容',
  `url` varchar(255) NOT NULL DEFAULT '' COMMENT '连接地址',
  `create_time` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间（发布时间）',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='公告记录表';

-- ----------------------------
-- Records of blog_notice
-- ----------------------------
INSERT INTO `blog_notice` VALUES ('1', '我的个人网站终于上线了', 'local.blog.com', '0');
INSERT INTO `blog_notice` VALUES ('2', '文章管理上线了，可以写文章了', '', '0');
INSERT INTO `blog_notice` VALUES ('3', '标签云实现了', 'local.blog.com', '0');
INSERT INTO `blog_notice` VALUES ('4', '资源管理上线了，今晚凌晨更新！！', '', '0');
